[{"/Users/horikazuto/ChooseOne/LatestChooseOne/src/index.js":"1","/Users/horikazuto/ChooseOne/LatestChooseOne/src/reportWebVitals.js":"2","/Users/horikazuto/ChooseOne/LatestChooseOne/src/App.js":"3","/Users/horikazuto/ChooseOne/LatestChooseOne/src/components/Header.js":"4","/Users/horikazuto/ChooseOne/LatestChooseOne/src/components/Footer.js":"5","/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/QuestionDetail.js":"6","/Users/horikazuto/ChooseOne/LatestChooseOne/src/components/SmallHeader.js":"7","/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/Contact.js":"8","/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/Home.js":"9","/Users/horikazuto/ChooseOne/LatestChooseOne/src/components/RightBar.js":"10","/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/QuestionMade.js":"11","/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/QuestionCreate.js":"12","/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/QuestionVoted.js":"13","/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/About.js":"14","/Users/horikazuto/ChooseOne/LatestChooseOne/src/components/LeftBar.js":"15","/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/QuestionCategory.js":"16","/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/QuestionLiked.js":"17","/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/QuestionSearch.js":"18","/Users/horikazuto/ChooseOne/LatestChooseOne/src/components/QuestionList.js":"19","/Users/horikazuto/ChooseOne/LatestChooseOne/src/components/ModalDelete.js":"20","/Users/horikazuto/ChooseOne/LatestChooseOne/src/components/PieChart.js":"21","/Users/horikazuto/ChooseOne/LatestChooseOne/src/components/BarChart.js":"22","/Users/horikazuto/ChooseOne/LatestChooseOne/src/utils/Funcs.js":"23","/Users/horikazuto/ChooseOne/LatestChooseOne/src/components/Question.js":"24","/Users/horikazuto/ChooseOne/LatestChooseOne/src/components/HoriChart.js":"25"},{"size":7182,"mtime":1632586500260,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":1630216223340,"results":"28","hashOfConfig":"27"},{"size":2148,"mtime":1630216223336,"results":"29","hashOfConfig":"27"},{"size":10488,"mtime":1630216223338,"results":"30","hashOfConfig":"27"},{"size":1438,"mtime":1630216223337,"results":"31","hashOfConfig":"27"},{"size":18645,"mtime":1630216223342,"results":"32","hashOfConfig":"27"},{"size":13009,"mtime":1630216223339,"results":"33","hashOfConfig":"27"},{"size":1682,"mtime":1630216223341,"results":"34","hashOfConfig":"27"},{"size":2919,"mtime":1630216223341,"results":"35","hashOfConfig":"27"},{"size":3747,"mtime":1630216223339,"results":"36","hashOfConfig":"27"},{"size":2582,"mtime":1630216223343,"results":"37","hashOfConfig":"27"},{"size":13512,"mtime":1630216223341,"results":"38","hashOfConfig":"27"},{"size":2661,"mtime":1630216223343,"results":"39","hashOfConfig":"27"},{"size":2536,"mtime":1630216223341,"results":"40","hashOfConfig":"27"},{"size":4330,"mtime":1630216223338,"results":"41","hashOfConfig":"27"},{"size":3619,"mtime":1630216223341,"results":"42","hashOfConfig":"27"},{"size":2580,"mtime":1630216223342,"results":"43","hashOfConfig":"27"},{"size":3861,"mtime":1630216223343,"results":"44","hashOfConfig":"27"},{"size":562,"mtime":1630216223339,"results":"45","hashOfConfig":"27"},{"size":3209,"mtime":1630216223338,"results":"46","hashOfConfig":"27"},{"size":1400,"mtime":1630216223338,"results":"47","hashOfConfig":"27"},{"size":1547,"mtime":1630216223337,"results":"48","hashOfConfig":"27"},{"size":1479,"mtime":1630216223343,"results":"49","hashOfConfig":"27"},{"size":7518,"mtime":1630216223339,"results":"50","hashOfConfig":"27"},{"size":1579,"mtime":1630216223338,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"170ujbg",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},"/Users/horikazuto/ChooseOne/LatestChooseOne/src/index.js",["114"],"/Users/horikazuto/ChooseOne/LatestChooseOne/src/reportWebVitals.js",[],"/Users/horikazuto/ChooseOne/LatestChooseOne/src/App.js",[],"/Users/horikazuto/ChooseOne/LatestChooseOne/src/components/Header.js",["115"],"import { fade, makeStyles, withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport InputBase from '@material-ui/core/InputBase';\nimport Badge from '@material-ui/core/Badge';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MailIcon from '@material-ui/icons/Mail';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport React, { useState } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport HomeIcon from '@material-ui/icons/Home';\nimport { IoIosAddCircle } from \"react-icons/io\";\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\nimport BuildIcon from '@material-ui/icons/Build';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nimport logo from '../ChooseOne1.png';\nimport logoSmall from '../ChooseOne60.png';\nimport logoMedium from '../ChooseOne80.png';\n\nvar tabColors = ['#ff69b4']\nfor(var i=1; i<11; i++) tabColors.push('hsla('+(i*100)+', 75%, 55%, 1)');\n\n\nexport default function PrimarySearchAppBar() {\n  \n  const styles = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\n  const [query, setQuery] = useState('');\n  const smallDisplay = useMediaQuery('(max-width:500px)');\n  const smallerThan1200 = useMediaQuery('(max-width:1200px)');\n  const smallerThan900 = useMediaQuery('(max-width:990px)');\n\n  const isMenuOpen = Boolean(anchorEl);\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\n\n  const onSubmitSearch = (event) => {\n    if(query.length === 0) return null;\n    window.location.href = '/search/' + query;\n  }\n\n  const handleProfileMenuOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMobileMenuClose = () => {\n    setMobileMoreAnchorEl(null);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n    handleMobileMenuClose();\n  };\n\n  const handleMobileMenuOpen = (event) => {\n    setMobileMoreAnchorEl(event.currentTarget);\n  };\n\n  const menuId = 'primary-search-account-menu';\n  const renderMenu = (\n    <Menu\n      anchorEl={anchorEl}\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      id={menuId}\n      keepMounted\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n      open={isMenuOpen}\n      onClose={handleMenuClose}\n    >\n      <MenuItem onClick={handleMenuClose}>Profile</MenuItem>\n      <MenuItem onClick={handleMenuClose}>My account</MenuItem>\n    </Menu>\n  );\n\n  const mobileMenuId = 'primary-search-account-menu-mobile';\n  const renderMobileMenu = (\n    <Menu\n      anchorEl={mobileMoreAnchorEl}\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      id={mobileMenuId}\n      keepMounted\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n      open={isMobileMenuOpen}\n      onClose={handleMobileMenuClose}\n    >\n      <MenuItem>\n        <IconButton aria-label=\"show 4 new mails\" color=\"inherit\">\n          <Badge badgeContent={4} color=\"secondary\">\n            <MailIcon />\n          </Badge>\n        </IconButton>\n        <p>Messages</p>\n      </MenuItem>\n      <MenuItem>\n        <IconButton aria-label=\"show 11 new notifications\" color=\"inherit\">\n          <Badge badgeContent={11} color=\"secondary\">\n            <NotificationsIcon />\n          </Badge>\n        </IconButton>\n        <p>Notifications</p>\n      </MenuItem>\n      <MenuItem onClick={handleProfileMenuOpen}>\n        <IconButton\n          aria-label=\"account of current user\"\n          aria-controls=\"primary-search-account-menu\"\n          aria-haspopup=\"true\"\n          color=\"inherit\"\n        >\n          <AccountCircle />\n        </IconButton>\n        <p>Profile</p>\n      </MenuItem>\n    </Menu>\n  );\n\n  return (\n    <div>\n      <AppBar className={styles.grow} style={{ height: smallerThan900 ? 35 : smallerThan1200 ? 40 : 44 }} position=\"static\">\n        <div className={!smallDisplay && 'container'}>\n          <Toolbar style={{ padding: 0 }}>\n            {smallerThan900 && <a href=\"/\" className={styles.logo}><img src={logoSmall} alt=\"ChooseOne\" /></a>}\n            {!smallerThan900 &&  smallerThan1200 && <a href=\"/\" className={styles.logo}><img src={logoMedium} alt=\"ChooseOne\" /></a>}\n            {!smallerThan1200 && <a href=\"/\" className={styles.logo}><img src={logo} alt=\"ChooseOne\" /></a>}\n            <div className={styles.search} style={{ height: smallerThan900 ? 28 : smallerThan1200 ? '60%' : '80%' }} >\n              <div className={styles.searchIcon}>\n                <SearchIcon />\n              </div>\n              <div style={{ width: '100%' }}>\n                <InputBase\n                  placeholder=\"Search\"\n                  className={styles.inputInput}\n                  inputProps={{ 'aria-label': 'search' }}\n                  value={query}\n                  onChange={(event) => setQuery(event.target.value)}\n                  onKeyDown={(e) => {if(e.key === 'Enter'){e.preventDefault(); onSubmitSearch(); }}}\n                />\n              </div>\n            </div>\n            {!smallerThan900\n              ?\n              <div className={styles.sectionDesktop} style={{ marginLeft: 'auto' }}>\n                <div className={styles.button} style={{ backgroundColor: 'rgb(40, 168, 69)'}}>\n                  <StyledButton onClick={() => window.location.href = '/'} startIcon={<HomeIcon />} className={styles.buttonStyle} aria-label=\"Home\">Home</StyledButton>\n                </div>\n                <div className={styles.button}  style={{ backgroundColor: 'rgb(255, 192, 8)'}}>\n                  <StyledButton onClick={() => window.location.href = '/create'} startIcon={<IoIosAddCircle />} className={styles.buttonStyle} aria-label=\"Home\">Add</StyledButton>\n                </div>\n                <div className={styles.button}  style={{ backgroundColor: 'rgb(3, 122, 255)'}}>\n                  <StyledButton onClick={() => window.location.href = '/made'} startIcon={<BuildIcon />} className={styles.buttonStyle} aria-label=\"Home\">Made</StyledButton>\n                </div>\n                <div className={styles.button}  style={{ backgroundColor: 'rgb(255, 192, 8)'}}>\n                  <StyledButton onClick={() => window.location.href = '/voted'} startIcon={<ThumbUpAltIcon />} className={styles.buttonStyle} aria-label=\"Home\">Voted</StyledButton>\n                </div>\n                <div className={styles.button}  style={{ backgroundColor: 'rgb(3, 122, 255)'}}>\n                  <StyledButton onClick={() => window.location.href = '/liked'} startIcon={<FavoriteIcon />} className={styles.buttonStyle} aria-label=\"Home\">Liked</StyledButton>\n                </div>\n              </div>\n              :\n              <div className={styles.sectionDesktop} style={{ marginLeft: 'auto', fontSize:15 }}>\n                <IconButton style={{backgroundColor: 'rgb(40, 168, 69)'}} onClick={() => window.location.href = '/'} className={styles.iconButton}>\n                  <HomeIcon style={{ fontSize: 18 }} />\n                </IconButton>\n                <IconButton style={{backgroundColor: 'rgb(255, 192, 8)'}} onClick={() => window.location.href = '/create'} className={styles.iconButton}>\n                  <IoIosAddCircle style={{ fontSize: 18 }} />\n                </IconButton>\n                <IconButton style={{backgroundColor: 'rgb(3, 122, 255)'}} onClick={() => window.location.href = '/made'} className={styles.iconButton}>\n                  <BuildIcon style={{ fontSize: 18 }} />\n                </IconButton>\n                <IconButton style={{backgroundColor: 'rgb(255, 192, 8)'}} onClick={() => window.location.href = '/voted'} className={styles.iconButton}>\n                  <ThumbUpAltIcon style={{ fontSize: 18 }} />\n                </IconButton>\n                <IconButton style={{backgroundColor: 'rgb(3, 122, 255)'}} onClick={() => window.location.href = '/liked'} className={styles.iconButton}>\n                  <FavoriteIcon style={{ fontSize: 18 }} />\n                </IconButton>\n              </div>\n            }\n          </Toolbar>\n        </div>\n      </AppBar>\n      {renderMobileMenu}\n      {renderMenu}\n    </div>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  iconButton: {\n    padding: 6, \n    marginLeft: 15, \n    outline: 'none', \n    color: 'white',\n    border: 'none',\n    '&:focus': {\n      outline: 'none'\n    }\n  },\n  button: {\n    display: 'flex', \n    alignItems: 'center', \n    height: 35, \n    borderRadius: 5,\n    marginLeft: 5,\n  },\n  buttonStyle: {\n    fontSize: 12, \n    outline: 'none', \n    color: 'white',\n  },\n  grow: {\n    // backgroundColor: '#FF3333',\n    // backgroundColor: 'red',\n    backgroundColor: '#ff4500',\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.25),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.3),\n    },\n    width: '100%',\n    marginLeft: 10,\n    [theme.breakpoints.up(777)]: {\n      marginLeft: 36,\n    },\n    marginRight: 5,\n  },\n  searchIcon: {\n    paddingLeft: 15,\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputInput: {\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    color: 'white',\n    width: '100%',\n    paddingTop: 1,\n    fontSize: 15,\n  },\n  sectionDesktop: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    width: 'auto',\n  },\n  sectionMobile: {\n    display: 'flex',\n    [theme.breakpoints.up('md')]: {\n      display: 'none',\n    },\n  },\n}));\n\nconst StyledButton = withStyles({\n  root: {\n    // background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    borderRadius: 4,\n    border: 0,\n    color: 'white',\n    height: 30,\n    padding: '0 15px',\n    outline: 'none',\n    textTransform: 'capitalize',\n  },\n})(Button);\n","/Users/horikazuto/ChooseOne/LatestChooseOne/src/components/Footer.js",[],"/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/QuestionDetail.js",["116","117","118","119","120"],"import React, { useEffect, useState, Fragment } from 'react';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport { makeStyles, createStyles } from '@material-ui/core';\nimport { createMuiTheme, ThemeProvider, withStyles } from '@material-ui/core/styles';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport FacebookIcon from '@material-ui/icons/Facebook';\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton';\nimport { WindMillLoading } from 'react-loadingg';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { Helmet } from \"react-helmet\";\nimport { Wave } from \"react-animated-text\";\nimport InfiniteScroll  from \"react-infinite-scroller\"\n\nimport QuestionList from '../components/QuestionList';\nimport ModalDelete from '../components/ModalDelete';\nimport PieChart from '../components/PieChart';\nimport BarChart from '../components/BarChart';\n\n// Firebase\nimport { getApps, initializeApp } from 'firebase/app';\nimport { getFirestore, updateDoc, increment, collection, deleteDoc, startAfter, arrayRemove, arrayUnion, query, \n      where, getDoc, doc, getDocs, orderBy, limit } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyArjDv3hS4_rw1YyNz-JFXDX1ufF72bqr8\",\n  authDomain: \"chooseone-105a9.firebaseapp.com\",\n  databaseURL: \"https://chooseone-default-rtdb.firebaseio.com\",\n  projectId: \"chooseone\",\n  storageBucket: \"chooseone.appspot.com\",\n  messagingSenderId: \"722704825746\",\n  appId: \"1:722704825746:web:73f11551b9e59f4bc2d54b\",\n  measurementId: \"G-YJ97DZH6V5\"\n};\nvar db = '';\nif (!getApps().length){ \n  const firebaseApp = initializeApp(firebaseConfig);\n  db = getFirestore(firebaseApp);\n}else{\n  db = getFirestore();\n}\n\nvar tabColors = ['#ff69b4']\nfor(var i=1; i<11; i++) tabColors.push('hsla('+(i*100)+', 75%, 55%, 1)');\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: 'rgb(3, 122, 255)',\n    },\n    secondary: {\n      main: '#f50057',\n    },\n    green: {\n      main: 'rgb(40, 168, 69)',\n    }\n  },\n});\n\nexport default function QuestionDetail (props) {\n\n  const uid = localStorage.getItem('chooseoneUid');\n  const the_slug = props.match.params.the_slug;\n\n  const [modalVisible, setModalVisible] = useState(false);\n  const [user, setUser] = useState(null);\n  const [madeIt, setMadeIt] = useState(null);\n  const [the_question, setTheQuestion] = useState(null);\n  const [likeIt, setLikeIt] = useState(false);\n  const [your_vote, setYourVote] = useState(null);\n  var choicesSorted = [];\n  const [relatedQues, setRelatedQues] = useState([]);\n  const [answered, setAnswered] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [end, setEnd] = useState(null);\n  const [last, setLast] = useState(null);\n\n  const loaded = relatedQues.length !== 0;\n  const styles = useStyles();\n  const smallDisplay = useMediaQuery('(max-width:500px)');\n  var l = [];\n  var v = [];\n  var c = [];\n  var content = '';\n  if(the_question){\n    for(var i=0; i<the_question.choices.length; i++){\n      if(i) content += the_question.choices[i].choice_text;\n      else content += ' vs ' + the_question.choices[i].choice_text;\n    }\n  }\n\n  const questionRef = doc(db, 'questions', the_slug);\n  const userRef = user !== null ? doc(db, 'users', uid) : '';\n\n  // QuestionDetail\n  const [warning, setWarning] = useState(null);\n  const [the_choice, setTheChoice] = useState(null);\n  var choiceSkeleton = [];\n  for(var i=0; i<(5-smallDisplay*2); i++){\n    choiceSkeleton.push(<div style={{ marginLeft: 30, marginTop: 15 }}><SkeletonTheme Primarycolor=\"white\" highlightColor=\"#d3d3d3\"><Skeleton duration={2} color='white' width={100} height={15 - smallDisplay*5}/></SkeletonTheme></div>)\n  }\n\n  useEffect(() => {\n    if(uid === null || user !== null) return null;\n\n    if(user === null){\n      const u = doc(db, 'users', uid);\n      const promise = new Promise(function(resolve) {\n        resolve(getDoc(u));\n      })\n      promise.then((us) => {\n        if(us.exists){\n          var the_user = us.data();\n          setUser(the_user);\n\n          if (the_user.question_liked.includes(the_slug)){\n            setLikeIt(true);\n          }else{\n            setLikeIt(false);\n          }\n\n          if (the_user.question_created.includes(the_slug)){\n            setMadeIt(true);\n          }else{\n            setMadeIt(false);\n          }\n\n          if(the_user.question_voted.some((q) => q.question === the_slug)){\n            setAnswered(true);\n            for(var i=0; i<the_user.question_voted.length; i++){\n              if(the_user.question_voted[i].question === the_slug) setYourVote(the_user.question_voted[i].answer)\n            }\n          }\n        }\n      })\n    }\n\n    const qu = doc(db, 'questions', the_slug);\n    const promiseD = new Promise(function(resolve, reject) {\n      resolve(getDoc(qu));\n    })\n    promiseD.then((doc) => {\n      if(doc.exists){\n        setTheQuestion(doc.data());\n        const ques = query(collection(db, 'questions'), where('category', 'array-contains-any', doc.data().category), orderBy('created_at', 'desc'), limit(10));\n        const promiseDD = new Promise(function(resolve) {\n          resolve(getDocs(ques));\n        })\n        \n        promiseDD.then(qq => {\n          var questionSimilar = [];\n          Promise.all(qq.docs.map(async doc => {\n            questionSimilar.push(doc.data());\n            if(questionSimilar.length === 10) setLast(doc);\n          })).then(() => {\n            setRelatedQues(questionSimilar);\n          });\n        })\n      }else{\n        window.location.href = '/';\n      }\n    });\n\n    if(end === null){\n      setEnd(query(collection(db, 'questions'), orderBy('created_at', 'asc'), limit(1)));\n    }\n  });\n\n  const loadMore = async () => {\n    var more = true;\n    setHasMore(false);\n\n    const next = await getDocs(query(collection(db, 'questions'), where('category', 'array-contains-any', the_question.category), orderBy('created_at', 'desc'), startAfter(last), limit(10)));\n    var ques = [];\n    await Promise.all(next.docs.map(async doc => {\n      ques.push(doc.data());\n      if(doc === end || ques.length === 10) {\n        if(doc === end) more = false;\n        setLast(doc);\n      }\n    })).then(() => setRelatedQues(relatedQues.concat(ques)));\n\n    if(more) setHasMore(true);\n    else setHasMore(false);\n  }\n\n  const onChoice = async (idx) => {\n    const the_choice = idx;\n\n    var the_slug = the_question.slug;\n    var your_vote = the_question.choices[the_choice].choice_text;\n    setYourVote(your_vote);\n    setAnswered(true);\n\n    var copy = Object.create(the_question);\n\n    copy.choices[the_choice].votes=parseInt(copy.choices[the_choice].votes, 10)+1;\n    \n    setTheQuestion(copy.__proto__);\n\n    await updateDoc(questionRef, {\n      choices: copy.choices,\n      all_votes: increment(1),\n      users_voted: arrayUnion(uid),\n    });\n\n    await updateDoc(userRef, {\n      question_voted: arrayUnion({ question: the_slug, answer: your_vote }),\n    })\n  }\n\n  const onLikeit = async () => {\n    if(likeIt){\n      setLikeIt(false);\n      await updateDoc(userRef, {\n        question_liked: arrayRemove(the_question.slug),\n      });\n      await updateDoc(questionRef, {\n        likes: increment(-1),\n      });\n      setTheQuestion({ ...the_question, likes: the_question.likes-1 });\n    }else{\n      setLikeIt(true);\n      await updateDoc(userRef, {\n        question_liked: arrayUnion(the_question.slug),\n      });\n      await updateDoc(questionRef, {\n        likes: increment(1),\n      });\n      setTheQuestion({ ...the_question, likes: the_question.likes+1 })\n    }\n  }\n\n  const onDelete = async () => {\n    await deleteDoc(questionRef);\n    await updateDoc(userRef, {\n      question_created: arrayRemove(the_question.slug),\n    })\n\n    window.location.href = \"/\";\n  }\n  \n  const onClose = () => {\n    setModalVisible(false);\n  }\n\n\n  if(the_question){\n    var copy=Array.from(the_question.choices);\n    copy.sort(function(first, second){\n      if (first.votes > second.votes){\n        return -1;\n      }else if (first.votes < second.votes){\n        return 1;\n      }else{\n        return 0;\n      }\n    });\n    choicesSorted = copy;\n\n    for(let i=0; i<copy.length;  i++){\n      l.push(copy[i].choice_text);\n      v.push(copy[i].votes);\n    }\n\n    var time = the_question.created_at;\n    var seconds = parseInt(time.slice(-2));\n    if(v !== []){\n      v.forEach((entry, idx) => {\n        c.push('hsla('+((idx+seconds)*70)+',75%,75%,1)');\n      });\n    }\n  }\n\n  return (\n    <Fragment>\n      <Helmet\n        title = {loaded && the_question.title}\n        meta={[\n          { name: 'description', content: { content } }\n        ]}\n      />\n      <div className={styles.resultsPos}>\n\n        <div className={styles.forSmallerVer}>\n          {/* カテゴリー */}\n          <div>\n            <p className={styles.category}><span className=\"text-primary fa fa-tag\" />\n              Category:\n              {loaded && (\n                <Fragment>\n                  {the_question.category.map((cate, idx) => {\n                    if ( idx === 0){\n                      return (<a className='text-primary' href={'/category/'+cate}> {cate}</a>)\n                    }else{\n                      return (<a className='text-primary' href={'/category/'+cate}>, {cate}</a>)\n                    }\n                  })}\n                </Fragment>\n              )}\n              {!loaded && <Skeleton style={{ marginLeft: 10 }} width={60} />}\n            </p>\n          </div>\n\n          {/* モーダル */}\n          {modalVisible &&  <ModalDelete onClose={onClose} onDelete={onDelete} />}\n\n          {/* タイトル */}\n          <h3 className={styles.title}>{loaded? the_question.title : <SkeletonTheme color=\"white\" highlightColor=\"#d3d3d3\"><Skeleton duration={2} width={1000 - smallDisplay*720} height={20}  /></SkeletonTheme>}</h3>\n          <p className={styles.date}>\n            {loaded ? the_question.created_on : <SkeletonTheme color=\"white\" highlightColor=\"#d3d3d3\"><Skeleton duration={2} color='white' width={100} height={7}/></SkeletonTheme> }\n          </p>\n          \n          <div style={{ marginBottom: 15 }}>\n            <a style={{ marginRight: 10, color: '#55acee', outline: 'none', border: 'none' }} className='tip' rel=\"noreferrer\" href={loaded && 'https://twitter.com/share?url=https://www.chooseone.app/'+the_question.slug+\"/&text=\"+the_question.title} target=\"_blank\" data-toggle=\"tooltip\" title=\"Share\"><TwitterIcon style={{ fontSize: smallDisplay && '18' }} /></a>\n            <a style={{ color: '#3B5998', outline: 'none', border: 'none' }} rel=\"noreferrer\" href={loaded && \"https://www.facebook.com/share.php?u=https://www.chooseone.app/\"+the_question.slug} target=\"_blank\" data-toggle=\"tooltip\" title=\"Share\"><FacebookIcon style={{ fontSize: smallDisplay && '18' }} /></a>\n          </div>\n\n          {answered && loaded && (\n            <div>\n              <p className={styles.your_vote}>You have voted for {your_vote}</p>\n            </div>\n          )}\n\n        </div>\n\n        {/* 選択肢 */}\n        {!answered && (\n          <div style={{ marginTop: 20 }}>\n            {loaded && (\n              <Fragment>\n                {the_question.choices.map((choice, idx) => (\n                  <div className={styles.choiceBtnPos}>\n                    <StyledButton variant=\"outlined\" color='primary' onClick={() => onChoice(idx)} >{choice.choice_text}</StyledButton>\n                  </div>\n                ))}\n              </Fragment>\n            )}\n            {!loaded && [choiceSkeleton]}\n            {warning !== null && (<p className={styles.warning}>{warning}</p>)}\n\n            {loaded && (\n              <div className={styles.voteBtnPos}>\n                <div className={styles.messageTextPos} >\n                  <Wave\n                    delay={3}\n                    text=\" TAP & GET SURPRISED\"\n                    effect='verticalFadeIn'\n                    effectChange={5.0}\n                  />\n                </div>\n              </div>\n            )}\n\n          </div>\n        )}\n\n        {/* グラフ系 */}\n        {answered && loaded && (\n          <Fragment>\n            <div className={styles.table} >\n              <table className='table' style={{ margin: 0 }}>\n                <thead>\n                  <tr>\n                    <td />\n                    <td>Choices</td>\n                    <td>Votes</td>\n                  </tr>\n                </thead>\n                <tbody>\n                  {choicesSorted.map((choice, idx) => (\n                    <tr style={{ backgroundColor: c[idx] }} >\n                      <th scope=\"row\">&nbsp;&nbsp;{idx+1}</th>\n                      <td >{choice.choice_text}</td>\n                      <td>{choice.votes}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n\n            <div className={styles.graphs}>\n              <div className={styles.pieGraph}><PieChart skeleton={!loaded} small={smallDisplay} labels={l} values={v} colors={c} /></div>\n              <div className={styles.barGraph}><BarChart skeleton={!loaded} small={smallDisplay} labels={l} values={v} colors={c} /></div>\n            </div>\n          </Fragment>\n        )}\n\n        {loaded && (\n          <Fragment>\n            {/* ボタン */}\n            <div className={styles.buttonsPos} style={{ marginTop: 100 - answered*80 }}>\n              <ThemeProvider theme={theme}>\n                <ButtonGroup size={smallDisplay ? 'small' : 'default'} variant=\"contained\" >\n                  {!likeIt && <Button onClick={onLikeit} startIcon={<FavoriteIcon fontSize='small'/>} color='primary' style={{ fontSize: 12 }}>{loaded ? the_question.likes : 'Like'}</Button>}\n                  {likeIt && <Button onClick={onLikeit} startIcon={<FavoriteIcon color='secondary' />} color='primary' style={{ fontSize: 12 }} >{loaded ? the_question.likes : 'Like'}</Button>}\n                  {madeIt && <Button onClick={() => setModalVisible(true)} startIcon={<DeleteIcon fontSize='small' />} style={{ fontSize: 12 }} color='secondary' >Delete</Button>}\n                </ButtonGroup>\n              </ThemeProvider>\n            </div>\n\n            {/* 似ている投稿 */}\n            {answered && (\n              <div>\n                <h3 className={styles.mayLike}>Questions You May Like</h3>\n                <div className={styles.similarPostsPos}>\n                  <InfiniteScroll\n                    loadMore={loadMore}\n                    hasMore={hasMore}\n                    threshold={500}\n                    loader={<div></div> }\n                  >\n                    {relatedQues.length !== 0 && <QuestionList questions={relatedQues} />}\n                  </InfiniteScroll>\n                  \n                  {relatedQues.length === 0 && <WindMillLoading style={{ position: 'relative', marginTop: 50, marginLeft: 50,}} color='rgb(39, 169, 68)' speed={1.2} size='large' />}\n                </div>\n              </div>\n            )}\n          </Fragment>\n        )}\n      </div>\n    </Fragment>\n  )\n}\n\nconst useStyles = makeStyles(() => createStyles({\n  choiceButton: {\n    \n  },\n  messageTextPos: {\n    fontSize: 13,\n    marginTop: 40,\n    fontFamily: 'Impact, sans-serif',\n    fontStyle: 'italic',\n    fontWeight: 900,\n    letterSpacing: '0.3em',\n    color: 'rgb(40, 168, 69)',\n    textShadow: '0.2 0.5px 0.5px 0px #004',\n    // transform: 'rotate(-10deg)',\n  },\n  category: {\n    fontFamily: 'latienne-pro, serif',\n    fontStyle: 'normal',\n    fontWeight: 400,\n    fontSize: 12,\n  },\n  title: {\n    fontFamily: 'latienne-pro, serif',\n    fontStyle: 'normal',\n    fontWeight: 500,\n    fontSize: 25,\n  },\n  mayLike: {\n    marginTop: 40,\n    marginBottom: 20,\n    fontFamily: 'lust-script, sans-serif',\n    fontStyle: 'normal',\n    fontWeight: 700,\n  },\n  similarPostsPos: {\n    width: '70%',\n  },\n  table: {\n    filter: 'drop-shadow(0px 0px 5px rgba(160, 160, 160, 0.7))',\n    borderRadius: 15,\n    marginTop: 20,\n    marginBottom: 25,\n    backgroundColor: 'white',\n    width: '100%',\n  },\n  graphs: {\n    display: 'flex',\n    width: '100%',\n    marginBottom: 15,\n  },\n  pieGraph: {\n    filter: 'drop-shadow(0px 0px 5px rgba(160, 160, 160, 0.7))',\n    borderRadius: 15,\n    padding: 10,\n    width: '49%',\n    backgroundColor: 'white',\n    height: 400,\n    marginRight: 10,\n  },\n  barGraph: {\n    filter: 'drop-shadow(0px 0px 5px rgba(160, 160, 160, 0.7))',\n    borderRadius: 15,\n    padding: 10,\n    width: '50%',\n    backgroundColor: 'white',\n    height: 400,\n  },\n  your_vote: {\n    color: 'yellowgreen',\n    fontSize: 14,\n  },\n  resultsPos: {\n    paddingTop: 15,\n    width: '100%',\n    paddingBottom: 30,\n  },\n  date: {\n    marginLeft: 20,\n    fontFamily: 'georgia, serif',\n    fontSize: 12,\n    color: '#457AFB',\n  },\n\n  // QuestionDetail\n\n  the_choice: {\n    marginLeft: 0,\n  },\n  choiceBtnPos: {\n    marginLeft: 25,\n    marginBottom: 8,\n    fontSize: 12,\n  },\n  voteBtnPos: {\n    marginTop: 20,\n    marginLeft: 25,\n  },\n  buttons: {\n    borderRadius: 30,\n  },\n\n  warning: {\n    color: 'red',\n    fontSize: 12,\n    margin: '0px 0px 0px 25px',\n    padding: 0,\n  },\n\n  '@media (max-width: 500px)': {\n    date: {\n      marginBottom: 10,\n    },\n    your_vote: {\n      fontSize: 12,\n      marginBottom: 10,\n    },\n    category: {\n      fontSize: 12,\n    },\n    title: {\n      fontSize: 24,\n      marginTop: 10,\n    },\n    mayLike: {\n      margin: '40px 0px 5px 10px',\n      fontSize: 20,\n    },\n    buttonsPos: {\n      marginLeft: 15,\n    },\n    forSmallerVer: {\n      paddingLeft: 15,\n      // marginTop: 10,\n    },\n    table: {\n      filter: 'drop-shadow(5px 0px 4px rgba(160, 160, 160, 0.7))',\n      marginTop: 10,\n      marginBottom: 4,\n    },\n    pieGraph: {\n      filter: 'drop-shadow(0px 2px 2px rgba(160, 160, 160, 0.7))',\n      height: 150,\n      marginBottom: 7,\n      borderRadius: 4,\n      padding: 4,\n      marginRight: 3,\n    },\n    barGraph: {\n      filter: 'drop-shadow(0px 2px 2px rgba(160, 160, 160, 0.7))',\n      height: 150,\n      marginBottom: 4,\n      borderRadius: 4,\n      padding: 4,\n    },\n    similarPostsPos: {\n      width: '100%',\n    },\n    voteBtnPos: {\n      marginLeft: 15,   //　元は15\n    },\n    messageTextPos: {\n      marginLeft: 30,\n    },\n    choiceBtnPos: {\n      marginLeft: 35,\n    },\n  },\n}));\n\n\nconst StyledButton = withStyles({\n  root: {\n    borderColor: 'rgb(3, 122, 255)', \n    color: 'rgb(3, 122, 255)', \n    fontSize: 11, \n    borderRadius: 15, \n    width: Math.min(300, window.innerWidth*0.6),\n    textTransform: 'none',\n  },\n})(Button);","/Users/horikazuto/ChooseOne/LatestChooseOne/src/components/SmallHeader.js",["121","122"],"import React, { Fragment, useEffect, useState } from 'react';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputBase from '@material-ui/core/InputBase';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\nimport InfoIcon from '@material-ui/icons/Info';\nimport ContactSupportIcon from '@material-ui/icons/ContactSupport';\nimport HomeIcon from '@material-ui/icons/Home';\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\nimport { BsFillAwardFill, BsMusicNoteBeamed } from 'react-icons/bs';\nimport { BiNews } from 'react-icons/bi';\nimport { AiFillHeart } from 'react-icons/ai';\nimport { FcSportsMode } from 'react-icons/fc';\nimport { MdWork } from 'react-icons/md';\nimport { IoIosSchool } from 'react-icons/io';\nimport { RiComputerFill } from 'react-icons/ri';\nimport { GiSofa, GiHealthPotion } from 'react-icons/gi';\n\nimport logoSmall from '../ChooseOne60.png';\n\n// Firebase\nimport { getApps, initializeApp } from 'firebase/app';\nimport { getFirestore, collection, orderBy, limit, query as firebaseQuery, getDocs } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyArjDv3hS4_rw1YyNz-JFXDX1ufF72bqr8\",\n  authDomain: \"chooseone-105a9.firebaseapp.com\",\n  databaseURL: \"https://chooseone-default-rtdb.firebaseio.com\",\n  projectId: \"chooseone\",\n  storageBucket: \"chooseone.appspot.com\",\n  messagingSenderId: \"722704825746\",\n  appId: \"1:722704825746:web:73f11551b9e59f4bc2d54b\",\n  measurementId: \"G-YJ97DZH6V5\"\n};\nvar db = '';\nif (!getApps().length){ \n  const firebaseApp = initializeApp(firebaseConfig);\n  db = getFirestore(firebaseApp);\n}else{\n  db = getFirestore();\n}\n\nvar tabColors = ['#ff69b4']\nfor(var i=1; i<11; i++) tabColors.push('hsla('+(i*100)+', 75%, 55%, 1)');\n\nexport default function SmallHeader (props) {\n  \n  const [query, setQuery] = useState('');\n  const styles = useStyles();\n  const [questions, setQuestions] = useState([]);\n  const [categoryAnchorEl, setCategoryAnchorEl] = useState(null);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [rankingAnchorEl, setRankingAnchorEl] = useState(null);\n\n  const isCategoryMenuOpen = Boolean(categoryAnchorEl);\n  const isMenuOpen = Boolean(anchorEl);\n  const isRankingMenuOpen = Boolean(rankingAnchorEl)\n\n  useEffect(() => {\n    if(questions.length !== 0) return null;\n\n    const q = firebaseQuery(collection(db, 'questions'), orderBy('all_votes', 'desc'), limit(3));\n    const promise = new Promise(function(resolve) {\n      resolve(getDocs(q));\n    });\n    promise.then((qq) => {\n      var ques = [];\n      Promise.all(qq.docs.map(doc => {\n        ques.push(doc.data());\n        return null;\n      })).then(() => {\n        setQuestions(ques);\n      });\n    })\n  }, []);\n\n  const onSubmitSearch = (event) => {\n    if(query.length === 0) return null;\n    window.location.href = '/search/' + query;\n  }\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleCategoryMenuClose = () => {\n    setCategoryAnchorEl(null);\n    handleMenuClose();\n  };\n\n  const handleRankingMenuClose = () => {\n    setRankingAnchorEl(null);\n    handleMenuClose();\n  };\n\n  const handleMenuOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const menuId = 'primary-search-account-menu';\n  const renderCategoryMenu = (\n    <Menu\n      anchorEl={categoryAnchorEl}\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      id={menuId}\n      keepMounted\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n      open={isCategoryMenuOpen}\n      onClose={handleCategoryMenuClose}\n    >\n      <MenuItem style={{color: tabColors[0] }} className={styles.cateItem} onClick={() => window.location.href = '/category/Love'}><AiFillHeart style={{ fontSize: 15, marginRight: 3 }} />Love</MenuItem>\n      <MenuItem style={{color: tabColors[1] }} className={styles.cateItem} onClick={() => window.location.href = '/category/News'}><BiNews style={{ fontSize: 17, marginRight: 3 }} />News</MenuItem>\n      <MenuItem style={{color: tabColors[2] }} className={styles.cateItem} onClick={() => window.location.href = '/category/Sports'}><FcSportsMode style={{ fontSize: 17, marginRight: 3 }} />Sports</MenuItem>\n      <MenuItem style={{color: tabColors[3] }} className={styles.cateItem} onClick={() => window.location.href = '/category/Pastime'}><BsMusicNoteBeamed style={{ fontSize: 17, marginRight: 3 }} />Pastime</MenuItem>\n      <MenuItem style={{color: tabColors[4] }} className={styles.cateItem} onClick={() => window.location.href = '/category/Health'}><GiHealthPotion style={{ fontSize: 17, marginRight: 3 }} />Health</MenuItem>\n      <MenuItem style={{color: tabColors[5] }} className={styles.cateItem} onClick={() => window.location.href = '/category/Living'}><GiSofa style={{ fontSize: 17, marginRight: 3 }} />Living</MenuItem>\n      <MenuItem style={{color: tabColors[6] }} className={styles.cateItem} onClick={() => window.location.href = '/category/Career'}><MdWork style={{ fontSize: 17, marginRight: 3 }}/>Career</MenuItem>\n      <MenuItem style={{color: tabColors[7] }} className={styles.cateItem} onClick={() => window.location.href = '/category/'}><IoIosSchool style={{ fontSize: 17, marginRight: 3 }} />Academics</MenuItem>\n      <MenuItem style={{color: tabColors[8] }} className={styles.cateItem} onClick={() => window.location.href = '/category/IT'}><RiComputerFill style={{ fontSize: 17, marginRight: 3 }}/>IT</MenuItem>\n    </Menu>\n  );\n\n  const renderRankingMenu = (\n    <Menu\n      anchorEl={rankingAnchorEl}\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      id={menuId}\n      keepMounted\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n      open={isRankingMenuOpen}\n      onClose={handleRankingMenuClose}\n    >\n      {questions.map((question, idx) => (\n        <MenuItem>\n          <div className=\"side_question\">\n            <div className=\"title\">\n              {idx === 0 && (\n                <Fragment>\n                  🥇 \n                  <a style={{ textDecoration: 'none' }} className=\"link\" href={'/q/' + question.slug}><h6 style={{color: 'rgb(223, 176, 0)'}}><strong>{question.title}</strong></h6></a>\n                </Fragment>\n              )}\n              {idx === 1 && (\n                <Fragment>\n                  🥈 \n                  <a style={{ textDecoration: 'none' }} className=\"link\" href={'/q/' + question.slug}><h6 style={{color: 'rgb(174, 179, 181)'}}><strong>{question.title}</strong></h6></a>\n                </Fragment>\n              )}\n              {idx === 2 && (\n                <Fragment>\n                  🥉 \n                  <a style={{ textDecoration: 'none' }} className=\"link\" href={'/q/' + question.slug}><h6 style={{color: 'rgba(184, 115, 51, 0.692)'}}><strong>{question.title}</strong></h6></a>\n                </Fragment>\n              )}\n            </div>\n            <ul>\n              {question.choices.map(choice => (\n                <div>\n                  <label>○ {choice.choice_text}</label>\n                  <br />\n                </div>\n              ))}\n            </ul>\n          </div>\n        </MenuItem>\n      ))}\n     </Menu>\n  );\n\n  const mobileMenuId = 'primary-search-account-menu-mobile';\n  const renderMenu = (\n    <Menu\n      anchorEl={anchorEl}\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      id={mobileMenuId}\n      keepMounted\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n      open={isMenuOpen}\n      onClose={handleMenuClose}\n      style={{ padding: 0 }}\n    >\n      <MenuItem onClick={() => window.location.href = '/'} className={styles.menuItemPos}>\n        <IconButton style={{ outline: 'none', }}  aria-label=\"Home\" color=\"inherit\">\n          <HomeIcon style={{ fontSize: 21, color: 'rgb(40, 168, 69)'}}/>\n        </IconButton>\n        <div style={{ display: 'flex', alignItems: 'center'}}><p className={styles.menuItemFont}>Home</p></div>\n      </MenuItem>\n      <MenuItem onClick={(event) => setRankingAnchorEl(event.currentTarget)} className={styles.menuItemPos}>\n        <IconButton style={{ fontSize: 21, outline: 'none' }}  aria-label=\"Ranking\" color=\"inherit\">\n          <BsFillAwardFill color='rgb(255, 192, 8)' />\n        </IconButton>\n        <div style={{ display: 'flex', alignItems: 'center'}}><p className={styles.menuItemFont}>Ranking</p></div>\n      </MenuItem>\n      <MenuItem onClick={(event) => setCategoryAnchorEl(event.currentTarget)} className={styles.menuItemPos}>\n        <IconButton style={{ outline: 'none' }}  aria-label=\"Home\" color=\"inherit\">\n          <LocalOfferIcon style={{ fontSize: 21, color: 'rgb(3, 122, 255)' }} />\n        </IconButton>\n        <div style={{ display: 'flex', alignItems: 'center'}}><p className={styles.menuItemFont}>Category</p></div>\n      </MenuItem>\n      <MenuItem onClick={() => window.location.href = '/about'}  className={styles.menuItemPos}>\n        <IconButton style={{ outline: 'none' }}  aria-label=\"About ChooseOne\" color=\"inherit\">\n          <InfoIcon style={{ fontSize: 21, color: 'red' }} />\n        </IconButton>\n        <div style={{ display: 'flex', alignItems: 'center'}}><p className={styles.menuItemFont}>About</p></div>\n      </MenuItem>\n      <MenuItem onClick={() => window.location.href = '/contact'}  className={styles.menuItemPos}>\n        <IconButton\n          aria-label=\"account of current user\"\n          aria-controls=\"primary-search-account-menu\"\n          aria-haspopup=\"true\"\n          color=\"inherit\"\n          style={{ outline: 'none' }} \n        >\n          <ContactSupportIcon style={{ fontSize: 21, }} />\n        </IconButton>\n        <div style={{ display: 'flex', alignItems: 'center'}}><p className={styles.menuItemFont}>Contact</p></div>\n      </MenuItem>\n    </Menu>\n  );\n\n  return (\n    <div>\n      <AppBar elevation={0} className={styles.grow} position=\"static\">\n        <Toolbar style={{paddingLeft: 9, paddingRight: 9 }}>\n          <a href=\"/\" className={styles.logo}><img src={logoSmall} alt=\"ChooseOne\" /></a>\n          <div className={styles.search}>\n            <div className={styles.searchIcon}>\n              <SearchIcon size='small' />\n            </div>\n            <InputBase\n              placeholder=\"Search\"\n              classes={{\n                root: styles.inputRoot,\n                input: styles.inputInput,\n              }}\n              inputProps={{ 'aria-label': 'search' }}\n              value={query}\n              onChange={(event) => setQuery(event.target.value)}\n              onKeyDown={(e) => {if(e.key === 'Enter'){e.preventDefault(); onSubmitSearch(); }}}\n            />\n          </div>\n          <div className={styles.sectionMobile}>\n            <IconButton\n              aria-label=\"show more\"\n              aria-controls={mobileMenuId}\n              aria-haspopup=\"true\"\n              onClick={handleMenuOpen}\n              color=\"inherit\"\n              style={{ outline: 'none' }} \n            >\n              <MenuIcon size='small'  />\n            </IconButton>\n          </div>\n        </Toolbar>\n      </AppBar>\n      {renderMenu}\n      {renderCategoryMenu}\n      {renderRankingMenu}\n    </div>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  cateItem: {\n    fontSize: 11, \n    // justifyContent: 'center', \n    paddingTop: 0, \n    paddingBottom: 0,\n    marginRight: -6,\n  },\n  menuItemFont: {\n    margin: 0,\n    fontSize: 14,\n  },\n  menuItemPos: {\n    margin: 0, \n    paddingLeft: 0,\n    paddingTop: 3,\n    paddingBottom: 3,\n  },\n  grow: {\n    position: 'fixed',\n    width: '100%',\n    height: 40,\n    // backgroundColor: '#FF3333',\n    backgroundColor: '#ff4500',\n    flexGrow: 1,\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.25),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.3),\n    },\n    margin: '2px 5px 2px 8px',\n    width: '100%',\n    height: 30,\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    fontSize: 14,\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: '20ch',\n    },\n  },\n}));","/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/Contact.js",[],"/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/Home.js",["123"],"import React, { useState, useEffect, Fragment } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport InfiniteScroll  from \"react-infinite-scroller\"\n\nimport QuestionList from '../components/QuestionList.js';\n\n// Firebase\nimport { getApps, initializeApp } from 'firebase/app';\nimport { getFirestore, collection, query, orderBy, limit, startAfter, getDocs } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyArjDv3hS4_rw1YyNz-JFXDX1ufF72bqr8\",\n  authDomain: \"chooseone-105a9.firebaseapp.com\",\n  databaseURL: \"https://chooseone-default-rtdb.firebaseio.com\",\n  projectId: \"chooseone\",\n  storageBucket: \"chooseone.appspot.com\",\n  messagingSenderId: \"722704825746\",\n  appId: \"1:722704825746:web:73f11551b9e59f4bc2d54b\",\n  measurementId: \"G-YJ97DZH6V5\"\n};\nvar db = '';\nif (!getApps().length){ \n  const firebaseApp = initializeApp(firebaseConfig);\n  db = getFirestore(firebaseApp);\n}else{\n  db = getFirestore();\n}\n\n\nexport default function Home () {\n\n  const [questions, setQuestions] = useState([]);\n  const [hasMore, setHasMore] = useState(true);\n  const [end, setEnd] = useState(null);\n  const [last, setLast] = useState(null);\n\n  useEffect(() => {\n    if(questions.length !== 0) return null;\n\n    const q = query(collection(db, 'questions'), orderBy('created_at', 'desc'), limit(10));\n    const promiseD = new Promise(function(resolve, reject) {\n      resolve(getDocs(q));\n    });\n    promiseD.then((qq) => {\n      var ques = [];\n      Promise.all(qq.docs.map(async doc => {\n        ques.push(doc.data());\n        if(ques.length === 10) setLast(doc);\n      })).then(() => {\n        setQuestions(ques);\n      })\n    }, []);\n\n    if(end === null){\n      setEnd(query(collection(db, 'questions'), orderBy('created_at', 'asc'), limit(1)));\n    }\n  });\n\n  const loadMore = async (page) => {\n    var more = true;\n    setHasMore(false);\n\n    const next = await getDocs(query(collection(db, 'questions'), orderBy('created_at', 'desc'), startAfter(last), limit(10)));\n    var ques = [];\n    await Promise.all(next.docs.map(async doc => {\n      ques.push(doc.data());\n      if(doc === end || ques.length === 10) {\n        if(doc === end) more = false;\n        setLast(doc);\n      }\n    })).then(() => setQuestions(questions.concat(ques)));\n\n    if(more) setHasMore(true);\n    else setHasMore(false);\n  }\n\n  return (\n    <Fragment>\n      <Helmet\n        title = 'ChooseOne'\n        meta={[\n          { name: 'description', content: 'ChooseOne lets you have access to general understandings through user-interactive questions. The more you vote, the more you can influence the results, and it can be helpful to all the people who want to know the results.' }\n        ]}\n      />\n      <InfiniteScroll\n        loadMore={loadMore}\n        hasMore={hasMore}\n        threshold={500}\n        loader={<div></div> }\n      >\n        <QuestionList questions={questions} />\n      </InfiniteScroll>\n    </Fragment>\n  )\n}\n","/Users/horikazuto/ChooseOne/LatestChooseOne/src/components/RightBar.js",[],"/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/QuestionMade.js",["124"],"import React, { useEffect, useState, Fragment } from 'react';\nimport QuestionList from '../components/QuestionList.js';\nimport { makeStyles, createStyles } from '@material-ui/core';\nimport { Helmet } from \"react-helmet\";\n\n// Firebase\nimport { getApps, initializeApp } from 'firebase/app';\nimport { getFirestore, getDoc, doc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyArjDv3hS4_rw1YyNz-JFXDX1ufF72bqr8\",\n  authDomain: \"chooseone-105a9.firebaseapp.com\",\n  databaseURL: \"https://chooseone-default-rtdb.firebaseio.com\",\n  projectId: \"chooseone\",\n  storageBucket: \"chooseone.appspot.com\",\n  messagingSenderId: \"722704825746\",\n  appId: \"1:722704825746:web:73f11551b9e59f4bc2d54b\",\n  measurementId: \"G-YJ97DZH6V5\"\n};\nvar db = '';\nif (!getApps().length){ \n  const firebaseApp = initializeApp(firebaseConfig);\n  db = getFirestore(firebaseApp);\n}else{\n  db = getFirestore();\n}\n\n\nexport default function QuestionMade (props) {\n  \n  const [questions, setQuestions] = useState(null);\n  const uid = localStorage.getItem('chooseoneUid');\n  const styles = useStyles();\n\n  useEffect(() => {\n    const u = doc(db, 'users', uid);\n    const promise = new Promise((function(resolve) {\n      resolve(getDoc(u));\n    }));\n    promise.then((user) => {\n      if(user.exists()){\n        var qs = user.data().question_created || [];\n        const promises = qs.map((q) => {\n          return getDoc(doc(db, 'questions', q));\n        })\n        Promise.all(promises).then((docs) => {\n          const data = docs.reverse().filter((doc) => doc.exists()).map((doc) => doc.data())\n          setQuestions(data);\n        })\n      }\n    })\n  }, []);\n\n  return (\n    <Fragment>\n      <Helmet\n        title = 'Questions You Made'\n        meta={[\n          { name: 'description', content: 'ChooseOne lets you have access to general understandings through user-interactive questions. The more you vote, the more you can influence the results, and it can be helpful to all the people who want to know the results.' }\n        ]}\n      />\n      <p className={styles.title}>Questions You Made</p>\n      {questions !== null && questions.length === 0\n        ?\n        <pre>   You haven't made any questions.</pre>\n        :\n        <QuestionList questions={questions} />\n      }\n    </Fragment>\n  )\n}\n\nconst useStyles = makeStyles(() => createStyles({\n  title: {\n    fontFamily: 'lust-script, sans-serif',\n    fontStyle: 'normal',\n    fontWeight: 700,\n    fontSize: 24,\n  },\n  '@media (max-width: 500px)': {\n    title: {\n      fontSize: 22,\n      marginLeft: 13,\n      marginTop: 7,\n    },\n  }\n}));\n","/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/QuestionCreate.js",["125","126","127","128","129"],"import React, { useState, Fragment } from 'react';\nimport { slugify, timeToDay } from '../utils/Funcs.js';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport PostAddIcon from '@material-ui/icons/PostAdd';\nimport AddIcon from '@material-ui/icons/Add';\nimport { createMuiTheme, ThemeProvider, withStyles } from '@material-ui/core/styles';\nimport Input from '@material-ui/core/Input';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { makeStyles, createStyles } from '@material-ui/core';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { WindMillLoading } from 'react-loadingg';\nimport { Helmet } from \"react-helmet\";\n\n// Firebase\nimport { getApps, initializeApp } from 'firebase/app';\nimport { getFirestore, arrayUnion, updateDoc, collection, query, where, getDocs, doc, setDoc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyArjDv3hS4_rw1YyNz-JFXDX1ufF72bqr8\",\n  authDomain: \"chooseone-105a9.firebaseapp.com\",\n  databaseURL: \"https://chooseone-default-rtdb.firebaseio.com\",\n  projectId: \"chooseone\",\n  storageBucket: \"chooseone.appspot.com\",\n  messagingSenderId: \"722704825746\",\n  appId: \"1:722704825746:web:73f11551b9e59f4bc2d54b\",\n  measurementId: \"G-YJ97DZH6V5\"\n};\nvar db = '';\nif (!getApps().length){ \n  const firebaseApp = initializeApp(firebaseConfig);\n  db = getFirestore(firebaseApp);\n}else{\n  db = getFirestore();\n}\n\nvar allCategories = ['Love', 'News', 'Sports', 'Pastime', 'Health', 'Living', 'Career', 'Academics', 'IT'];\nvar tabColors = ['#ff69b4']\nfor(var i=1; i<11; i++) tabColors.push('hsla('+(i*100)+', 75%, 55%, 1)');\n\nexport default function QuestionCreate (props) {\n\n  const uid = localStorage.getItem('chooseoneUid');\n  const [categories, setCategories] = useState([]);\n  const [howManyChoice, setHowManyChoice] = useState(2);\n  const [warning, setWarning] = useState('');\n  const [title, setTitle] = useState('');\n  const [choices, setChoices] = useState([]);\n  const [voting, setVoting] = useState(false);\n  var added=[];\n  const styles = useStyles();\n  const smallDisplay = useMediaQuery('(max-width:500px)');\n  // const [user, setUser] = useRecoilState(userAtom);\n  const theme = createMuiTheme({\n    palette: {\n      primary: {\n        main: 'rgb(3, 122, 255)',\n      },\n      secondary: {\n        main: '#f50057',\n      },\n      green: {\n        main: 'rgb(40, 168, 69)',\n      }\n    },\n  });\n\n  const onSubmit = async () => {\n\n    if(title === ''){\n      setWarning('Title cannot be empty.');\n      setTimeout(() => setWarning(''),5000);\n      return null;\n    }\n    var ifSuperUser = title.slice(0, 5) === 'SUQ__';\n    var likes = 0;\n    if(ifSuperUser){\n      if(!'0123456789'.includes(title[title.length-2])){\n        setWarning('Likesの入力を忘れてるよ');\n        setTimeout(() => setWarning(''),5000);\n        return null;\n      }\n      likes = parseInt(title.slice(-2), 10);\n      var finalTitle = title.slice(5).slice(0, -2);\n    } else var finalTitle = title;\n    \n    var S = new Set(choices);\n    if(choices.length !== S.size) {\n      setWarning('There are same choices.');\n      setTimeout(() => setWarning(''),5000);\n      return null;\n    }\n\n    var totalVotes = 0;\n    let new_choices = [];\n    for(var i=0; i<howManyChoice; i++){\n      if(choices[i] === undefined || choices[i] === ''){\n        setWarning('There is an empty choice.');\n        setTimeout(() => setWarning(''),5000);\n        return null;\n      }else{\n        var text = ifSuperUser ? choices[i].slice(0, -3) : choices[i];\n        var votes = ifSuperUser ? choices[i].slice(-3) : 0;\n        if(ifSuperUser && !'0123456789'.includes(votes[0])){\n          setWarning('選択肢の最後の数字忘れてる');\n          setTimeout(() => setWarning(''),5000);\n          return null;\n        }\n        if(votes[0] === '0') votes = votes[1] + votes[2];\n        totalVotes += parseInt(votes, 10);\n        new_choices.push({\n          choice_text: text,\n          votes: parseInt(votes, 10),\n        });\n      }\n    }\n\n    if(categories.length === 0){\n      setWarning('Category cannot be empty.');\n      setTimeout(() => setWarning(''),5000);\n      return null;\n    }\n\n    setVoting(true);\n\n    var how_many = await getDocs(query(collection(db, 'questions')));\n    how_many = how_many.docs.length;\n\n    var slug=slugify(finalTitle);\n    if(slug === '') slug=finalTitle;\n\n    var rep=0;\n\n    const sameQ = await getDocs(query(collection(db, 'questions'), where('slug', '==', slug)));\n    rep = sameQ.docs.length;\n\n    while(rep !== 0) {\n      rep=rep+1;\n      var conc = '___'.concat(rep);\n      var now_slug=slug.concat(conc);\n      \n      const sameQ = await getDocs(query(collection(db, 'questions'), where('slug', '==', now_slug)));\n      if(sameQ.docs.length === 0){\n        slug = now_slug;\n        rep = 0;\n      }\n    }\n\n    let current=new Date();\n    current=current.toJSON();\n    var day = timeToDay(current.slice(0, 10));\n    var new_question = {\n      id: how_many+1,\n      title: finalTitle,\n      author: uid,\n      category: categories,\n      slug: slug,\n      created_on: day,\n      created_at: current.slice(0, 10)+' '+current.slice(11, 19),\n      choices: new_choices,\n      comments: [],\n      users_voted: [],\n      all_votes: totalVotes,\n      active: true,\n      likes: likes,\n      SUQ: ifSuperUser,\n    }\n\n    await setDoc(doc(db, 'questions', slug), new_question);\n\n    await updateDoc(doc(db, 'users', uid), {\n      question_created: arrayUnion(slug),\n    });\n\n    window.location.href = \"/q/\" + slug;\n  };\n\n  const titleChangeText = (event) => {\n    setTitle(event.target.value);\n  };\n\n  const choiceChangeText = (event, idx) => {\n    var copy = choices.slice();\n    copy[idx] = event.target.value;\n\n    setChoices(copy);\n  };\n\n  const onCategory = (idx) => {\n    var copy=categories.slice();\n    if(copy.includes(allCategories[idx])){\n      copy=copy.filter(c => c !== allCategories[idx]);\n    }else{\n      copy.push(allCategories[idx]);\n    }\n    setCategories(copy);\n  }\n\n  const onChoiceDelete = (i) => {\n    var copy = choices.slice();\n    copy.splice(i, 1);\n    setChoices(copy);\n    setHowManyChoice(howManyChoice-1);\n  }\n\n  var added = [];\n  for (let i=0; i<howManyChoice; i++){\n    added.push(\n      <div className={styles.choicePos}>\n        <Input\n          id=\"standard-adornment-weight\"\n          autoComplete={false}\n          value={choices[i] ? choices[i] : ''}\n          className={styles.choiceInput}\n          onChange={(event) => choiceChangeText(event, i)}\n          startAdornment={<InputAdornment position=\"start\">{i+1}. </InputAdornment>}\n          endAdornment={i > 1 && <InputAdornment position=\"end\"><Tooltip title='Delete'><IconButton aria-label=\"delete\" style={{ outline: 'none', }} onClick={() => onChoiceDelete(i)} color='secondary'><DeleteIcon /></IconButton></Tooltip></InputAdornment>}\n          aria-describedby=\"standard-weight-helper-text\"\n          inputProps={{\n            'aria-label': 'weight',\n          }}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Fragment>\n      <Helmet\n        title = 'Add New Questions'\n        meta={[\n          { name: 'description', content: 'ChooseOne lets you have access to general understandings through user-interactive questions. The more you vote, the more you can influence the results, and it can be helpful to all the people who want to know the results.' }\n        ]}\n      />\n      <div className={styles.add}>\n        <h3 className={styles.title}>Let's Add New Questions!</h3>\n        \n        {/* タイトル */}\n        <h4 className={styles.labels}>Title</h4>\n        <Input\n          id=\"standard-adornment-weight\"\n          autoComplete={false}\n          className={styles.titleInput}\n          onChange={(event) => titleChangeText(event)}\n          value={title}\n          aria-describedby=\"standard-weight-helper-text\"\n          startAdornment={<InputAdornment position=\"start\">Q. </InputAdornment>}\n          inputProps={{\n            'aria-label': 'weight',\n          }}\n        />\n\n\n        {/* 選択肢 */}\n        <h4 className={styles.labels}>Choices</h4>\n        <div>\n          {howManyChoice !== 0 && (\n            [added]\n          )}\n        </div>\n\n        {/* ボタン */}\n        <div>\n          <ThemeProvider theme={theme}>\n            <ButtonGroup size={smallDisplay ? 'small' : 'default'} disableElevation variant=\"contained\" >\n              {howManyChoice < 9 && <StyledButton startIcon={<AddIcon /> } color='primary' onClick={() => setHowManyChoice(howManyChoice+1) } >Add</StyledButton>}\n            </ButtonGroup>\n          </ThemeProvider>\n        </div>\n\n        {/* カテゴリー */}\n        <div className={styles.cateTitle}>\n          <h4 className={styles.labels}>Category</h4>\n        </div>\n        <div>\n          <div>\n            {allCategories.map((cate, idx) => {\n              if (idx >= 3) return null;\n              if (categories.includes(allCategories[idx])) var changer = { backgroundColor: tabColors[idx], color: 'white'  }\n              else { var changer = { backgroundColor: 'white', color: tabColors[idx] } }\n              return (\n                <Fragment>\n                  <button onClick={() => onCategory(idx) } type='button' data-id={idx} style={Object.assign({ borderColor: tabColors[idx], outline: 'none'}, changer)} className={styles.cate}  >{cate}</button>\n                </Fragment>\n              )\n            })}\n          </div>\n          <div>\n            {allCategories.map((cate, idx) => {\n              if (idx <= 2 || idx >= 6) return null;\n              if (categories.includes(allCategories[idx])) var changer = { backgroundColor: tabColors[idx], color: 'white'  }\n              else { var changer = { backgroundColor: 'white', color: tabColors[idx] } }\n              return (\n                <Fragment>\n                  <button onClick={() => onCategory(idx) } type='button' data-id={idx} style={Object.assign({ borderColor: tabColors[idx], outline: 'none'}, changer)} className={styles.cate} >{cate}</button>\n                </Fragment>\n              )\n            })}\n          </div>\n          <div>\n            {allCategories.map((cate, idx) => {\n              if (idx <= 5) return null;\n              if (categories.includes(allCategories[idx])) var changer = { backgroundColor: tabColors[idx], color: 'white'  }\n              else { var changer = { backgroundColor: 'white', color: tabColors[idx] } }\n              return (\n                <Fragment>\n                  <button onClick={() => onCategory(idx) } type='button' data-id={idx} style={Object.assign({ borderColor: tabColors[idx], outline: 'none'}, changer)} className={styles.cate}  >{cate}</button>\n                </Fragment>\n              )\n            })}\n          </div>\n        </div>\n        {/* 最後 */}\n        {warning && <p style={{color: 'red' }} className={styles.warning} >{warning}</p>}\n        {!warning && <p className={styles.warning}>You can delete but cannot edit after you make one.</p>}\n        {!voting\n          ?\n          <ThemeProvider theme={theme}>\n            <ButtonGroup disableElevation variant=\"contained\" >\n              <StyledButton style={{ fontSize: 11, outline: 'none', backgroundColor: 'rgb(40, 168, 69)' }} size='small' startIcon={<PostAddIcon /> } onClick={onSubmit} >Add Question</StyledButton>\n            </ButtonGroup>\n          </ThemeProvider>\n          :\n          <div className={styles.loadingPos}>\n            <WindMillLoading speed={1.2}  />\n          </div>\n        }\n      </div>\n    </Fragment>\n  )\n}\n\nconst useStyles = makeStyles(() => createStyles({\n  loadingPos: {\n    marginTop: 50,\n    // marginLeft: 50,\n    position: 'relative',\n  },\n  labels: {\n    fontFamily: 'latienne-pro, serif',\n    fontStyle: 'normal',\n    fontWeight: 400,\n  },\n  title: {\n    fontFamily: 'lust-script, sans-serif',\n    fontStyle: 'normal',\n    fontWeight: 700,\n  },\n  cateTitle: {\n    marginTop: 25,\n    marginBottom: 20,\n  },\n  warning: {\n    marginTop: 20,\n    fontSize: 12,\n  },\n  titleInput: {\n    width: '70%',\n    marginBottom: 20,\n    borderColor: '#617',\n    borderWidth: 1,\n  },\n  add: {\n    backgroundColor: 'white',\n    height: 'auto',\n    textAlign: 'center',\n    filter: 'drop-shadow(0px 0px 5px rgba(160, 160, 160, 0.7))',\n    padding: 10,\n    paddingBottom: 50,\n    borderRadius: 15,\n  },\n  cate: {\n    fontSize: 5,\n    marginBottom: 10,\n    marginRight: 10,\n    textAlign: 'center',\n    width: 70,\n    height: 25,\n    paddingLeft: 2,\n    paddingRight: 2,\n    cursor: 'pointer',\n    borderWidth: 1,\n    borderStyle: 'solid',\n    borderRadius: 25,\n  },\n  choicePos: {\n    marginBottom: 15,\n  },\n  choiceInput: {\n    width: '50%',\n  },\n  '@media (max-width: 500px)': {\n    cate: {\n      fontSize: 12,\n    },\n    labels: {\n      fontSize: 20,\n      marginTop: 20,\n    },\n    titleInput: {\n      width: '90%',\n    },\n    choiceInput: {\n      width: '80%',\n    },\n    cateTitle: {\n      marginTop: 20,\n      marginBottom: 10,\n    },\n  }\n}));\n\n\n\nconst StyledButton = withStyles({\n  root: {\n    // background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    borderRadius: 4,\n    fontSize: 12,\n    color: 'white',\n    height: 30,\n    padding: '0 15px',\n    outline: 'none',\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n  },\n  cate: {\n    textTransform: 'capitalize',\n  },\n})(Button);\n\n","/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/QuestionVoted.js",["130"],"import React, { useEffect, useState, Fragment } from 'react';\nimport QuestionList from '../components/QuestionList.js';\nimport { makeStyles, createStyles } from '@material-ui/core';\nimport { Helmet } from \"react-helmet\";\n\n// Firebase\nimport { getApps, initializeApp } from 'firebase/app';\nimport { getFirestore, getDoc, doc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyArjDv3hS4_rw1YyNz-JFXDX1ufF72bqr8\",\n  authDomain: \"chooseone-105a9.firebaseapp.com\",\n  databaseURL: \"https://chooseone-default-rtdb.firebaseio.com\",\n  projectId: \"chooseone\",\n  storageBucket: \"chooseone.appspot.com\",\n  messagingSenderId: \"722704825746\",\n  appId: \"1:722704825746:web:73f11551b9e59f4bc2d54b\",\n  measurementId: \"G-YJ97DZH6V5\"\n};\nvar db = '';\nif (!getApps().length){ \n  const firebaseApp = initializeApp(firebaseConfig);\n  db = getFirestore(firebaseApp);\n}else{\n  db = getFirestore();\n}\n\nexport default function QuestionVoted (props) {\n\n  // カスタムフック\n  // react router\n  // コンテキスト\n  \n  const [questions, setQuestions] = useState(null);\n  const uid = localStorage.getItem('chooseoneUid');\n  const styles = useStyles();\n\n  useEffect(() => {\n    const u = doc(db, 'users', uid);\n    const promise = new Promise((function(resolve) {\n      resolve(getDoc(u));\n    }));\n    promise.then((user) => {\n      if(user.exists()){\n        var qs = user.data().question_voted || [];\n        const promises = qs.map((q) => {\n          return getDoc(doc(db, 'questions', q.question));\n        })\n        Promise.all(promises).then((docs) => {\n          const data = docs.reverse().filter((doc) => doc.exists()).map((doc) => doc.data())\n          setQuestions(data);\n        })\n      }\n    })\n  }, []);\n\n  return (\n    <Fragment>\n      <Helmet\n        title = 'Questions You Voted'\n        meta={[\n          { name: 'description', content: 'ChooseOne lets you have access to general understandings through user-interactive questions. The more you vote, the more you can influence the results, and it can be helpful to all the people who want to know the results.' }\n        ]}\n      />\n      <p className={styles.title}>Questions You Voted</p>\n      {questions !== null && questions.length === 0\n        ?\n        <pre>   There are no questions you like.</pre>\n        :\n        <QuestionList questions={questions} />\n      }\n    </Fragment>\n  )\n}\n\nconst useStyles = makeStyles(() => createStyles({\n  title: {\n    fontFamily: 'lust-script, sans-serif',\n    fontStyle: 'normal',\n    fontWeight: 700,\n    fontSize: 24,\n  },\n  '@media (max-width: 500px)': {\n    title: {\n      fontSize: 22,\n      marginLeft: 13,\n      marginTop: 7,\n    },\n  }\n}));","/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/About.js",[],"/Users/horikazuto/ChooseOne/LatestChooseOne/src/components/LeftBar.js",[],"/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/QuestionCategory.js",["131"],"import React, { useEffect, useState, Fragment } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport InfiniteScroll  from \"react-infinite-scroller\"\nimport { makeStyles, createStyles } from '@material-ui/core';\n\nimport QuestionList from '../components/QuestionList.js';\n\n// Firebase\nimport { getApps, initializeApp } from 'firebase/app';\nimport { getFirestore, collection, query, where, getDocs, orderBy, limit, startAfter } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyArjDv3hS4_rw1YyNz-JFXDX1ufF72bqr8\",\n  authDomain: \"chooseone-105a9.firebaseapp.com\",\n  databaseURL: \"https://chooseone-default-rtdb.firebaseio.com\",\n  projectId: \"chooseone\",\n  storageBucket: \"chooseone.appspot.com\",\n  messagingSenderId: \"722704825746\",\n  appId: \"1:722704825746:web:73f11551b9e59f4bc2d54b\",\n  measurementId: \"G-YJ97DZH6V5\"\n};\nvar db = '';\nif (!getApps().length){ \n  const firebaseApp = initializeApp(firebaseConfig);\n  db = getFirestore(firebaseApp);\n}else{\n  db = getFirestore();\n}\n\nexport default function QuestionCategory (props) {\n\n  const [questions, setQuestions] = useState([]);\n  const [hasMore, setHasMore] = useState(true);\n  const [end, setEnd] = useState(null);\n  const [last, setLast] = useState(null);\n  const category = props.match.params.category;\n  const styles = useStyles();\n\n  useEffect(() => {\n    if(questions.length !== 0) return null;\n\n    const q = query(collection(db, 'questions'), where('category', 'array-contains', category), orderBy('created_at', 'desc'), limit(10));\n    const promise = new Promise(function(resolve, reject) {\n      resolve(getDocs(q));\n    });\n    promise.then((qq) => {\n      var ques = [];\n      Promise.all(qq.docs.map(async doc => {\n        ques.push(doc.data());\n        if(ques.length === 10) setLast(doc);\n      })).then(() => {\n        setQuestions(ques);\n      })\n    });\n\n    if(end === null){\n      setEnd(query(collection(db, 'questions'), where('category', 'array-contains', category), orderBy('created_at', 'asc'), limit(1)));\n    }\n  });\n\n  const loadMore = async (page) => {\n    var more = true;\n    setHasMore(false);\n\n    const next = await getDocs(query(collection(db, 'questions'), where('category', 'array-contains', category), orderBy('created_at', 'desc'), startAfter(last), limit(10)));\n    var ques = [];\n    await Promise.all(next.docs.map(async doc => {\n      ques.push(doc.data());\n      if(doc === end || ques.length === 10) {\n        if(doc === end) more = false;\n        setLast(doc);\n      }\n    })).then(() => setQuestions(questions.concat(ques)));\n\n    if(more) setHasMore(true);\n    else setHasMore(false);\n  }\n\n  return (\n    <Fragment>\n      <Helmet\n        title = {'Questions Categorized as ' + category}\n        meta={[\n          { name: 'description', content: 'ChooseOne lets you have access to general understandings through user-interactive questions. The more you vote, the more you can influence the results, and it can be helpful to all the people who want to know the results.' }\n        ]}\n      />\n      <p className={styles.title}>Questions Categorized as {category}</p>\n      <InfiniteScroll\n        loadMore={loadMore}\n        hasMore={hasMore}\n        threshold={500}\n        loader={<div></div> }\n      >\n        <QuestionList questions={questions} />\n      </InfiniteScroll>\n    </Fragment>\n  )\n}\n\nconst useStyles = makeStyles(() => createStyles({\n  title: {\n    fontFamily: 'lust-script, sans-serif',\n    fontStyle: 'normal',\n    fontWeight: 700,\n    fontSize: 24,\n  },\n\n  '@media (max-width: 500px)': {\n    title: {\n      fontSize: 22,\n      marginLeft: 15,\n      marginTop: 7,\n    }\n  }\n}));\n\n","/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/QuestionLiked.js",["132"],"import React, { useEffect, useState, Fragment } from 'react';\nimport QuestionList from '../components/QuestionList.js';\nimport { makeStyles, createStyles } from '@material-ui/core';\nimport { Helmet } from \"react-helmet\";\n\n// Firebase\nimport { getApps, initializeApp } from 'firebase/app';\nimport { getFirestore, getDoc, doc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyArjDv3hS4_rw1YyNz-JFXDX1ufF72bqr8\",\n  authDomain: \"chooseone-105a9.firebaseapp.com\",\n  databaseURL: \"https://chooseone-default-rtdb.firebaseio.com\",\n  projectId: \"chooseone\",\n  storageBucket: \"chooseone.appspot.com\",\n  messagingSenderId: \"722704825746\",\n  appId: \"1:722704825746:web:73f11551b9e59f4bc2d54b\",\n  measurementId: \"G-YJ97DZH6V5\"\n};\nvar db = '';\nif (!getApps().length){ \n  const firebaseApp = initializeApp(firebaseConfig);\n  db = getFirestore(firebaseApp);\n}else{\n  db = getFirestore();\n}\n\n\nexport default function QuestionLiked (props) {\n\n  const [questions, setQuestions] = useState(null);\n  const uid = localStorage.getItem('chooseoneUid');\n  const styles = useStyles();\n\n  useEffect(() => {\n    const u = doc(db, 'users', uid);\n    const promise = new Promise((function(resolve) {\n      resolve(getDoc(u));\n    }));\n    promise.then((user) => {\n      if(user.exists()){\n        var qs = user.data().question_liked || [];\n        const promises = qs.map((q) => {\n          return getDoc(doc(db, 'questions', q));\n        })\n        Promise.all(promises).then((docs) => {\n          const data = docs.reverse().filter((doc) => doc.exists()).map((doc) => doc.data())\n          setQuestions(data);\n        })\n      }\n    })\n  }, []);\n\n  return (\n    <Fragment>\n      <Helmet\n        title = 'Questions You Like'\n        meta={[\n          { name: 'description', content: 'ChooseOne lets you have access to general understandings through user-interactive questions. The more you vote, the more you can influence the results, and it can be helpful to all the people who want to know the results.' }\n        ]}\n      />\n      <p className={styles.title}>Questions You Like</p>\n      {questions !== null && questions.length === 0\n        ?\n        <pre>   There are no questions you like.</pre>\n        :\n        <QuestionList questions={questions} />\n      }\n    </Fragment>\n  )\n}\n\nconst useStyles = makeStyles(() => createStyles({\n  title: {\n    fontFamily: 'lust-script, sans-serif',\n    fontStyle: 'normal',\n    fontWeight: 700,\n    fontSize: 24,\n  },\n  '@media (max-width: 500px)': {\n    title: {\n      fontSize: 22,\n      marginLeft: 13,\n      marginTop: 7,\n    },\n  }\n}));\n","/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/QuestionSearch.js",["133"],"import React, { useState, useEffect, Fragment } from 'react';\nimport { WindMillLoading } from 'react-loadingg';\nimport { makeStyles, createStyles } from '@material-ui/core';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { Helmet } from \"react-helmet\";\n\nimport QuestionList from '../components/QuestionList.js';\n\n// Firebase\nimport { getApps, initializeApp } from 'firebase/app';\nimport { getFirestore, collection, getDocs } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyArjDv3hS4_rw1YyNz-JFXDX1ufF72bqr8\",\n  authDomain: \"chooseone-105a9.firebaseapp.com\",\n  databaseURL: \"https://chooseone-default-rtdb.firebaseio.com\",\n  projectId: \"chooseone\",\n  storageBucket: \"chooseone.appspot.com\",\n  messagingSenderId: \"722704825746\",\n  appId: \"1:722704825746:web:73f11551b9e59f4bc2d54b\",\n  measurementId: \"G-YJ97DZH6V5\"\n};\nvar db = '';\nif (!getApps().length){ \n  const firebaseApp = initializeApp(firebaseConfig);\n  db = getFirestore(firebaseApp);\n}else{\n  db = getFirestore();\n}\n\n\nexport default function QuestionSearch (props) {\n\n  const [results, setResults] = useState(null);\n  const query = props.match.params.query;\n  const q = query.toLowerCase();\n  const styles = useStyles();\n  const smallDisplay = useMediaQuery('(max-width:500px)');\n\n  useEffect(() => {\n    if(results !== null) return null;\n\n    const promise = new Promise(function(resolve) {\n      resolve(getDocs(collection(db, 'questions')))\n    })\n    var ques = [];\n    promise.then((qq) => {\n      Promise.all(qq.docs.map(que => {\n        var question = que.data();\n        if(question.slug.includes('___')) var slug = question.slug.split('___')[0];\n        else var slug = question.slug;\n        var titleWords = slug.split('-');\n        if(titleWords.includes(q)) {\n          ques.unshift(question);\n        }else{\n          for(var i=0; i<question.choices.length; i++){\n            var c = question.choices[i].choice_text.toLowerCase().split(' ');\n            if(c.includes(q)){ \n              ques.push(question)\n              break;\n            }\n          }\n        }\n        return null;\n      }));\n    }).then(() => {\n      setResults(ques);\n    })\n  });\n\n  if(results === null){\n    return (\n      <Fragment>\n        <p className={styles.title}>Search Results</p>\n        <div><pre>      Searching...</pre></div>\n        <div className={styles.loadingPos}>\n          <WindMillLoading className={styles.loadingPos} speed={1.2} size={smallDisplay ? 'small' : 'large'} />\n        </div>\n      </Fragment>\n    )\n  }else{\n    return (\n      <Fragment>\n        <Helmet\n          title = 'Search Results'\n          meta={[\n            { name: 'description', content: 'ChooseOne lets you have access to general understandings through user-interactive questions. The more you vote, the more you can influence the results, and it can be helpful to all the people who want to know the results.' }\n          ]}\n        />\n        <h3 className={styles.title}>Search Results</h3>\n        {results.length === 0 && <pre className={styles.forSmallNoMatch}>      No search results for - {query} -</pre>}\n        {results.length !== 0 && (\n          <Fragment>\n            <pre>      - {query} -</pre>\n            <QuestionList questions={results} />\n          </Fragment>\n        )}\n      </Fragment>\n    )\n  }\n}\n\nconst useStyles = makeStyles(() => createStyles({\n  title: {\n    fontFamily: 'lust-script, sans-serif',\n    fontStyle: 'normal',\n    fontWeight: 700,\n    fontSize: 24,\n  },\n  loadingPos: {\n    marginTop: 50,\n    marginLeft: 50,\n    position: 'relative',\n  },\n\n  '@media (max-width: 500px)': {\n    title: {\n      fontSize: 22,\n      marginLeft: 13,\n      marginTop: 7,\n    },\n    forSmallNoMatch: {\n      fontSize: 12,\n    },\n    loadingPos: {\n      position: 'relative',\n      fontSize: 10,\n      marginTop: 70,\n      marginLeft: -150,\n    }\n  }\n}));\n","/Users/horikazuto/ChooseOne/LatestChooseOne/src/components/QuestionList.js",[],"/Users/horikazuto/ChooseOne/LatestChooseOne/src/components/ModalDelete.js",[],"/Users/horikazuto/ChooseOne/LatestChooseOne/src/components/PieChart.js",[],"/Users/horikazuto/ChooseOne/LatestChooseOne/src/components/BarChart.js",[],"/Users/horikazuto/ChooseOne/LatestChooseOne/src/utils/Funcs.js",[],"/Users/horikazuto/ChooseOne/LatestChooseOne/src/components/Question.js",["134","135","136","137","138","139","140","141","142","143"],"import React, { Fragment, useState, useEffect } from 'react';\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { makeStyles, createStyles } from '@material-ui/core';\nimport { createMuiTheme, ThemeProvider, withStyles } from '@material-ui/core/styles';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Button from '@material-ui/core/Button';\nimport { Bar } from 'react-chartjs-2';\n\nimport HoriChart from './HoriChart';\n\n// Firebase\nimport { getApps, initializeApp } from 'firebase/app';\nimport { getFirestore, updateDoc, increment, collection, deleteDoc, startAfter, arrayRemove, arrayUnion, query, \n      where, getDoc, doc, getDocs, orderBy, limit } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyArjDv3hS4_rw1YyNz-JFXDX1ufF72bqr8\",\n  authDomain: \"chooseone-105a9.firebaseapp.com\",\n  databaseURL: \"https://chooseone-default-rtdb.firebaseio.com\",\n  projectId: \"chooseone\",\n  storageBucket: \"chooseone.appspot.com\",\n  messagingSenderId: \"722704825746\",\n  appId: \"1:722704825746:web:73f11551b9e59f4bc2d54b\",\n  measurementId: \"G-YJ97DZH6V5\"\n};\nvar db = '';\nif (!getApps().length){ \n  const firebaseApp = initializeApp(firebaseConfig);\n  db = getFirestore(firebaseApp);\n}else{\n  db = getFirestore();\n}\n\nexport default function QuestionList (props) {\n\n  const theme = createMuiTheme({\n    palette: {\n      primary: {\n        main: 'rgb(3, 122, 255)',\n      },\n      secondary: {\n        main: '#f50057',\n      },\n      green: {\n        main: 'rgb(40, 168, 69)',\n      }\n    },\n  });\n\n  const uid = localStorage.getItem('chooseoneUid');\n  // const [your_vote, setYourVote] = useState(null);\n  const [answered, setAnswered] = useState(false);\n  const styles = useStyles();\n  var l = [];\n  var v = [];\n  var c = [];\n\n  const the_question = props.the_question;\n  const notLoaded = (the_question.category === null || the_question.category === undefined);\n  const smallDisplay = useMediaQuery('(max-width:500px)');\n  var choiceSkeleton = [];\n\n  for(var i=0; i<(5-smallDisplay*2); i++){\n    choiceSkeleton.push(\n      <div>\n        <label for=\"choice{idx}\">\n          <Skeleton duration={2.5} width={150} height={10}/>\n        </label>\n      </div>\n    )\n  }\n\n  if(the_question !== 'skeleton' && the_question !== undefined){\n    var copy = the_question.choices;\n\n    for(let i=0; i<copy.length;  i++){\n      l.push(copy[i].choice_text);\n      v.push(copy[i].votes);\n    }\n\n    var time = the_question.created_at;\n    var seconds = parseInt(time.slice(-2));\n    if(v !== []){\n      v.forEach((entry, idx) => {\n        c.push('hsla('+((idx+seconds)*70)+',75%,75%,1)');\n      });\n    }\n  }\n\n  useEffect(() => {\n    if(uid === null) return null;\n\n    const u = doc(db, 'users', uid);\n    const promise = new Promise(function(resolve) {\n      resolve(getDoc(u));\n    })\n    promise.then((us) => {\n      if(us.exists){\n        var the_user = us.data();\n\n        if(the_user.question_voted.some((q) => q.question === the_question.slug)){\n          setAnswered(true);\n        }\n      }\n    });\n  });\n\n  const onChoice = async (idx) => {\n    var the_slug = the_question.slug;\n    var your_vote = the_question.choices[idx].choice_text;\n\n    setAnswered(true);\n\n    var copy = Object.create(the_question);\n\n    copy.choices[idx].votes=parseInt(copy.choices[idx].votes, 10)+1;\n    \n\n    await updateDoc(doc(db, 'questions', the_question.slug), {\n      choices: copy.choices,\n      all_votes: increment(1),\n      users_voted: arrayUnion(uid),\n    });\n\n    await updateDoc(doc(db, 'users', uid), {\n      question_voted: arrayUnion({ question: the_slug, answer: your_vote }),\n    })\n  }\n\n  return (\n    <Fragment>\n      <div className={styles.onepost}>\n        \n        <p className='cali2' style={{ fontSize: 12 }}><span className='text-primary fa fa-tag'></span>\n          Category:\n          {!notLoaded && (\n            <Fragment>\n              {the_question.category.map((cate, idx) => {\n                if ( idx === 0){\n                  return (<a className='text-primary' href={'/category/'+cate}> {cate}</a>)\n                }else{\n                  return (<a className='text-primary' href={'/category/'+cate}>, {cate}</a>)\n                }\n              })}\n            </Fragment>\n          )}\n          {notLoaded && <Skeleton style={{ marginLeft: 10 }} width={60} />}\n        </p>\n        <h4 style={{ fontSize: 19 }} className='cali2'><a className={styles.link} href={'/q/'+the_question.slug}>{!notLoaded ? the_question.title : <SkeletonTheme color=\"white\" highlightColor=\"#d3d3d3\"><Skeleton duration={2.5} width={'80%'} height={20}  /></SkeletonTheme> }</a></h4>\n\n        <div className={styles.choices} style={{ paddingLeft: smallDisplay && answered && 0, paddingRight: !smallDisplay && answered && 35 }}>\n          <ul style={{ paddingLeft: 0 }}>\n            {!notLoaded && (\n              <Fragment>\n                {!answered ?\n                  <Fragment>\n                    {the_question.choices.map((choice,idx) => (\n                      <div>\n                        {/* <label for=\"choice{idx}\">○ {choice.choice_text}</label>\n                        <br></br> */}\n                        <StyledButton variant=\"outlined\" onClick={() => onChoice(idx)} size=\"small\" color=\"primary\">\n                          {choice.choice_text}\n                        </StyledButton>\n                      </div>\n                    ))}\n                  </Fragment>\n                  :\n                  <Fragment>\n                    <div className={styles.HoriChart}><HoriChart small={smallDisplay} skeleton={notLoaded} labels={l} values={v} colors={c} /></div>\n                  </Fragment>\n                }\n              </Fragment>\n            )}\n            {notLoaded && [choiceSkeleton]}\n          </ul>\n        </div>\n        <div className={styles.more}>\n          <ThemeProvider theme={theme}>\n            <ButtonGroup size={smallDisplay ? 'small' : 'default'} disableElevation variant=\"contained\" >\n              <Button variant='contained' onClick={() => window.location.href = '/q/'+the_question.slug } color=\"primary\">\n                More\n              </Button>\n            </ButtonGroup>\n          </ThemeProvider>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nconst useStyles = makeStyles(() => createStyles({\n  more: {\n    marginBottom: 10,\n    marginLeft: 12,\n  },\n  onepost: {\n    padding: 10,\n    paddingLeft: 15,\n    marginBottom: 15,\n    filter: 'drop-shadow(0px 0px 5px rgba(160, 160, 160, 0.7))',\n    backgroundColor: 'white',\n    position: 'relative',\n    borderRadius: 15,\n  },\n\n  choices: {\n    paddingLeft: 40,\n  },\n\n  link: {\n    color: 'black',\n    '&:hover': {\n      background: 'linear-gradient(transparent 70%, #45cafb 0%)',\n      textDecoration: 'none',\n    }\n  },\n  \n  '@media (max-width: 500px)': {\n    onepost: {\n      borderRadius: 0,\n      marginBottom: 5,\n      paddingLeft: 10,\n      paddingBottom: 1,\n      filter: 'none',\n\n      link: {\n        '&:hover': {\n          background: 'none',\n        }\n      }\n    }\n  }\n}));\n\nconst StyledButton = withStyles({\n  root: {\n    borderRadius: 7,\n    borderColor: '#696969', \n    borderWidth: 0.1,\n    color: '#696969', \n    fontSize: 11, \n    width: Math.min(200, window.innerWidth*0.5),\n    textTransform: 'none',\n    margin: 2,\n    paddingLeft: 12,\n    alignItems: 'center',\n    justifyContent: 'start',\n  },\n\n  '@media (max-width: 500px)': {\n    root: {\n      width: window.innerWidth*0.5,\n    }\n  }\n})(Button);","/Users/horikazuto/ChooseOne/LatestChooseOne/src/components/HoriChart.js",["144"],"import React, { Fragment } from 'react';\nimport { Bar } from 'react-chartjs-2';\n\nexport default function BarChart (props) {\n\n  var { small, skeleton, labels, values, colors } = props;\n  var duration = skeleton ? 0 : 5000 - small*3000;\n\n  const data = {\n    labels: labels,\n    datasets: [\n      {\n        data: values,\n        backgroundColor: colors,\n        borderColor: colors,\n        hoverBackgroundColor: colors,\n        borderWidth: 2,\n        hoverBorderColor: colors,\n        hoverBorderWidth: 7,\n        borderSkipped: 'top'\n      }\n    ]\n  };\n\n  const options = {\n    indexAxis: 'y',\n    maintainAspectRatio: false,\n    animation: {\n      duration: 0,\n    },\n    tooltips: {\n      backgroundColor: 'white',\n      titleFontColor: 'black',\n      caretSize: 5,\n      callbacks: {\n        labelColor: function(tooltipItem, chart){\n          return {\n            borderColor: 'white',\n            backgroundColor: 'white',\n          }\n        },\n        labelTextColor: function(tooltipItem, chart){\n          return 'black';\n        },\n      }\n    },\n    scales: {\n      yAxes: [{\n        barPercentage: .1,\n        categoryPercentage: .4,\n      }],\n      xAxes: [{\n        ticks: {\n          min: 0,\n          precision: 0,\n        }\n      }]\n    },\n    plugins: {\n      legend: {\n        display: false\n      },\n      labels: {\n        render: 'value',\n        precision: 0,\n      }\n    },\n    layout: {\n      padding: {\n        // top: 13,\n      },\n    },\n  };\n\n  return (\n    <Fragment>\n      <Bar height={'auto'} data={data} options={options} />\n    </Fragment>\n  )\n}",{"ruleId":"145","severity":1,"message":"146","line":5,"column":8,"nodeType":"147","messageId":"148","endLine":5,"endColumn":23},{"ruleId":"145","severity":1,"message":"149","line":61,"column":9,"nodeType":"147","messageId":"148","endLine":61,"endColumn":29},{"ruleId":"145","severity":1,"message":"150","line":97,"column":19,"nodeType":"147","messageId":"148","endLine":97,"endColumn":29},{"ruleId":"145","severity":1,"message":"151","line":98,"column":10,"nodeType":"147","messageId":"148","endLine":98,"endColumn":20},{"ruleId":"145","severity":1,"message":"152","line":98,"column":22,"nodeType":"147","messageId":"148","endLine":98,"endColumn":34},{"ruleId":"153","severity":1,"message":"154","line":100,"column":11,"nodeType":"147","messageId":"155","endLine":100,"endColumn":12},{"ruleId":"156","severity":1,"message":"157","line":104,"column":3,"nodeType":"147","endLine":104,"endColumn":12,"suggestions":"158"},{"ruleId":"145","severity":1,"message":"159","line":15,"column":8,"nodeType":"147","messageId":"148","endLine":15,"endColumn":24},{"ruleId":"156","severity":1,"message":"160","line":80,"column":6,"nodeType":"161","endLine":80,"endColumn":8,"suggestions":"162"},{"ruleId":"156","severity":1,"message":"163","line":36,"column":3,"nodeType":"147","endLine":36,"endColumn":12,"suggestions":"164"},{"ruleId":"156","severity":1,"message":"165","line":51,"column":6,"nodeType":"161","endLine":51,"endColumn":8,"suggestions":"166"},{"ruleId":"153","severity":1,"message":"167","line":87,"column":16,"nodeType":"147","messageId":"155","endLine":87,"endColumn":26},{"ruleId":"153","severity":1,"message":"168","line":208,"column":7,"nodeType":"147","messageId":"155","endLine":208,"endColumn":12},{"ruleId":"153","severity":1,"message":"169","line":282,"column":26,"nodeType":"147","messageId":"155","endLine":282,"endColumn":33},{"ruleId":"153","severity":1,"message":"169","line":294,"column":26,"nodeType":"147","messageId":"155","endLine":294,"endColumn":33},{"ruleId":"153","severity":1,"message":"169","line":306,"column":26,"nodeType":"147","messageId":"155","endLine":306,"endColumn":33},{"ruleId":"156","severity":1,"message":"165","line":54,"column":6,"nodeType":"161","endLine":54,"endColumn":8,"suggestions":"170"},{"ruleId":"156","severity":1,"message":"171","line":38,"column":3,"nodeType":"147","endLine":38,"endColumn":12,"suggestions":"172"},{"ruleId":"156","severity":1,"message":"165","line":51,"column":6,"nodeType":"161","endLine":51,"endColumn":8,"suggestions":"173"},{"ruleId":"153","severity":1,"message":"174","line":50,"column":18,"nodeType":"147","messageId":"155","endLine":50,"endColumn":22},{"ruleId":"145","severity":1,"message":"175","line":8,"column":10,"nodeType":"147","messageId":"148","endLine":8,"endColumn":13},{"ruleId":"145","severity":1,"message":"176","line":14,"column":46,"nodeType":"147","messageId":"148","endLine":14,"endColumn":56},{"ruleId":"145","severity":1,"message":"177","line":14,"column":58,"nodeType":"147","messageId":"148","endLine":14,"endColumn":67},{"ruleId":"145","severity":1,"message":"178","line":14,"column":69,"nodeType":"147","messageId":"148","endLine":14,"endColumn":79},{"ruleId":"145","severity":1,"message":"179","line":14,"column":81,"nodeType":"147","messageId":"148","endLine":14,"endColumn":92},{"ruleId":"145","severity":1,"message":"180","line":14,"column":106,"nodeType":"147","messageId":"148","endLine":14,"endColumn":111},{"ruleId":"145","severity":1,"message":"181","line":15,"column":7,"nodeType":"147","messageId":"148","endLine":15,"endColumn":12},{"ruleId":"145","severity":1,"message":"182","line":15,"column":27,"nodeType":"147","messageId":"148","endLine":15,"endColumn":34},{"ruleId":"145","severity":1,"message":"183","line":15,"column":36,"nodeType":"147","messageId":"148","endLine":15,"endColumn":43},{"ruleId":"145","severity":1,"message":"184","line":15,"column":45,"nodeType":"147","messageId":"148","endLine":15,"endColumn":50},{"ruleId":"145","severity":1,"message":"185","line":7,"column":7,"nodeType":"147","messageId":"148","endLine":7,"endColumn":15},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","'handleMobileMenuOpen' is assigned a value but never used.","'setWarning' is assigned a value but never used.","'the_choice' is assigned a value but never used.","'setTheChoice' is assigned a value but never used.","no-redeclare","'i' is already defined.","redeclared","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setEnd'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [uid, user, the_slug, end] as a second argument to the useEffect Hook.",["186"],"'useScrollTrigger' is defined but never used.","React Hook useEffect has a missing dependency: 'questions.length'. Either include it or remove the dependency array.","ArrayExpression",["187"],"React Hook useEffect contains a call to 'setEnd'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [questions.length, end] as a second argument to the useEffect Hook.",["188"],"React Hook useEffect has a missing dependency: 'uid'. Either include it or remove the dependency array.",["189"],"'finalTitle' is already defined.","'added' is already defined.","'changer' is already defined.",["190"],"React Hook useEffect contains a call to 'setEnd'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [questions.length, category, end] as a second argument to the useEffect Hook.",["191"],["192"],"'slug' is already defined.","'Bar' is defined but never used.","'collection' is defined but never used.","'deleteDoc' is defined but never used.","'startAfter' is defined but never used.","'arrayRemove' is defined but never used.","'query' is defined but never used.","'where' is defined but never used.","'getDocs' is defined but never used.","'orderBy' is defined but never used.","'limit' is defined but never used.","'duration' is assigned a value but never used.",{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"199","fix":"201"},{"desc":"202","fix":"203"},{"desc":"199","fix":"204"},"Add dependencies array: [uid, user, the_slug, end]",{"range":"205","text":"206"},"Update the dependencies array to be: [questions.length]",{"range":"207","text":"208"},"Add dependencies array: [questions.length, end]",{"range":"209","text":"210"},"Update the dependencies array to be: [uid]",{"range":"211","text":"212"},{"range":"213","text":"212"},"Add dependencies array: [questions.length, category, end]",{"range":"214","text":"215"},{"range":"216","text":"212"},[5818,5818],", [uid, user, the_slug, end]",[3049,3051],"[questions.length]",[1766,1766],", [questions.length, end]",[1637,1639],"[uid]",[1688,1690],[2017,2017],", [questions.length, category, end]",[1634,1636]]