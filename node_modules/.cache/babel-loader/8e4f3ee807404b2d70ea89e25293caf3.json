{"ast":null,"code":"var _jsxFileName = \"/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/QuestionCategory.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, Fragment } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport { makeStyles, createStyles } from '@material-ui/core';\nimport QuestionList from '../components/QuestionList.js'; // Firebase\n\nimport { getApps, initializeApp } from 'firebase/app';\nimport { getFirestore, collection, query, where, getDocs, orderBy, limit, startAfter } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyArjDv3hS4_rw1YyNz-JFXDX1ufF72bqr8\",\n  authDomain: \"chooseone-105a9.firebaseapp.com\",\n  databaseURL: \"https://chooseone-default-rtdb.firebaseio.com\",\n  projectId: \"chooseone\",\n  storageBucket: \"chooseone.appspot.com\",\n  messagingSenderId: \"722704825746\",\n  appId: \"1:722704825746:web:73f11551b9e59f4bc2d54b\",\n  measurementId: \"G-YJ97DZH6V5\"\n};\nvar db = '';\n\nif (!getApps().length) {\n  const firebaseApp = initializeApp(firebaseConfig);\n  db = getFirestore(firebaseApp);\n} else {\n  db = getFirestore();\n}\n\nexport default function QuestionCategory(props) {\n  _s();\n\n  const [questions, setQuestions] = useState([]);\n  const [hasMore, setHasMore] = useState(true);\n  const [end, setEnd] = useState(null);\n  const [last, setLast] = useState(null);\n  const category = props.match.params.category;\n  const styles = useStyles();\n  useEffect(() => {\n    if (questions.length !== 0) return null;\n    const q = query(collection(db, 'questions'), where('category', 'array-contains', category), orderBy('created_at', 'desc'), limit(10));\n    const promise = new Promise(function (resolve, reject) {\n      resolve(getDocs(q));\n    });\n    promise.then(qq => {\n      var ques = [];\n      Promise.all(qq.docs.map(async doc => {\n        ques.push(doc.data());\n        if (ques.length === 10) setLast(doc);\n      })).then(() => {\n        setQuestions(ques);\n      });\n    });\n\n    if (end === null) {\n      setEnd(query(collection(db, 'questions'), where('category', 'array-contains', category), orderBy('created_at', 'asc'), limit(1)));\n    }\n  });\n\n  const loadMore = async page => {\n    var more = true;\n    setHasMore(false);\n    const next = await getDocs(query(collection(db, 'questions'), where('category', 'array-contains', category), orderBy('created_at', 'desc'), startAfter(last), limit(10)));\n    var ques = [];\n    await Promise.all(next.docs.map(async doc => {\n      ques.push(doc.data());\n\n      if (doc === end || ques.length === 10) {\n        if (doc === end) more = false;\n        setLast(doc);\n      }\n    })).then(() => setQuestions(questions.concat(ques)));\n    if (more) setHasMore(true);else setHasMore(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      title: 'Questions Categorized as ' + category,\n      meta: [{\n        name: 'description',\n        content: 'ChooseOne lets you have access to general understandings through user-interactive questions. The more you vote, the more you can influence the results, and it can be helpful to all the people who want to know the results.'\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.title,\n      children: [\"Questions Categorized as \", category]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      loadMore: loadMore,\n      hasMore: hasMore,\n      threshold: 500,\n      loader: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(QuestionList, {\n        questions: questions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(QuestionCategory, \"d1np1b58Q0tKDsU9CCSspp/f7Bk=\", false, function () {\n  return [useStyles];\n});\n\n_c = QuestionCategory;\nconst useStyles = makeStyles(() => createStyles({\n  title: {\n    fontFamily: 'lust-script, sans-serif',\n    fontStyle: 'normal',\n    fontWeight: 700,\n    fontSize: 24\n  },\n  '@media (max-width: 500px)': {\n    title: {\n      fontSize: 22,\n      marginLeft: 15,\n      marginTop: 7\n    }\n  }\n}));\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionCategory\");","map":{"version":3,"sources":["/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/QuestionCategory.js"],"names":["React","useEffect","useState","Fragment","Helmet","InfiniteScroll","makeStyles","createStyles","QuestionList","getApps","initializeApp","getFirestore","collection","query","where","getDocs","orderBy","limit","startAfter","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","length","firebaseApp","QuestionCategory","props","questions","setQuestions","hasMore","setHasMore","end","setEnd","last","setLast","category","match","params","styles","useStyles","q","promise","Promise","resolve","reject","then","qq","ques","all","docs","map","doc","push","data","loadMore","page","more","next","concat","name","content","title","fontFamily","fontStyle","fontWeight","fontSize","marginLeft","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Fragment } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport InfiniteScroll  from \"react-infinite-scroller\"\nimport { makeStyles, createStyles } from '@material-ui/core';\n\nimport QuestionList from '../components/QuestionList.js';\n\n// Firebase\nimport { getApps, initializeApp } from 'firebase/app';\nimport { getFirestore, collection, query, where, getDocs, orderBy, limit, startAfter } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyArjDv3hS4_rw1YyNz-JFXDX1ufF72bqr8\",\n  authDomain: \"chooseone-105a9.firebaseapp.com\",\n  databaseURL: \"https://chooseone-default-rtdb.firebaseio.com\",\n  projectId: \"chooseone\",\n  storageBucket: \"chooseone.appspot.com\",\n  messagingSenderId: \"722704825746\",\n  appId: \"1:722704825746:web:73f11551b9e59f4bc2d54b\",\n  measurementId: \"G-YJ97DZH6V5\"\n};\nvar db = '';\nif (!getApps().length){ \n  const firebaseApp = initializeApp(firebaseConfig);\n  db = getFirestore(firebaseApp);\n}else{\n  db = getFirestore();\n}\n\nexport default function QuestionCategory (props) {\n\n  const [questions, setQuestions] = useState([]);\n  const [hasMore, setHasMore] = useState(true);\n  const [end, setEnd] = useState(null);\n  const [last, setLast] = useState(null);\n  const category = props.match.params.category;\n  const styles = useStyles();\n\n  useEffect(() => {\n    if(questions.length !== 0) return null;\n\n    const q = query(collection(db, 'questions'), where('category', 'array-contains', category), orderBy('created_at', 'desc'), limit(10));\n    const promise = new Promise(function(resolve, reject) {\n      resolve(getDocs(q));\n    });\n    promise.then((qq) => {\n      var ques = [];\n      Promise.all(qq.docs.map(async doc => {\n        ques.push(doc.data());\n        if(ques.length === 10) setLast(doc);\n      })).then(() => {\n        setQuestions(ques);\n      })\n    });\n\n    if(end === null){\n      setEnd(query(collection(db, 'questions'), where('category', 'array-contains', category), orderBy('created_at', 'asc'), limit(1)));\n    }\n  });\n\n  const loadMore = async (page) => {\n    var more = true;\n    setHasMore(false);\n\n    const next = await getDocs(query(collection(db, 'questions'), where('category', 'array-contains', category), orderBy('created_at', 'desc'), startAfter(last), limit(10)));\n    var ques = [];\n    await Promise.all(next.docs.map(async doc => {\n      ques.push(doc.data());\n      if(doc === end || ques.length === 10) {\n        if(doc === end) more = false;\n        setLast(doc);\n      }\n    })).then(() => setQuestions(questions.concat(ques)));\n\n    if(more) setHasMore(true);\n    else setHasMore(false);\n  }\n\n  return (\n    <Fragment>\n      <Helmet\n        title = {'Questions Categorized as ' + category}\n        meta={[\n          { name: 'description', content: 'ChooseOne lets you have access to general understandings through user-interactive questions. The more you vote, the more you can influence the results, and it can be helpful to all the people who want to know the results.' }\n        ]}\n      />\n      <p className={styles.title}>Questions Categorized as {category}</p>\n      <InfiniteScroll\n        loadMore={loadMore}\n        hasMore={hasMore}\n        threshold={500}\n        loader={<div></div> }\n      >\n        <QuestionList questions={questions} />\n      </InfiniteScroll>\n    </Fragment>\n  )\n}\n\nconst useStyles = makeStyles(() => createStyles({\n  title: {\n    fontFamily: 'lust-script, sans-serif',\n    fontStyle: 'normal',\n    fontWeight: 700,\n    fontSize: 24,\n  },\n\n  '@media (max-width: 500px)': {\n    title: {\n      fontSize: 22,\n      marginLeft: 15,\n      marginTop: 7,\n    }\n  }\n}));\n\n"]},"metadata":{},"sourceType":"module"}