{"ast":null,"code":"var _jsxFileName = \"/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport axios from \"axios\";\nimport QuestionList from '../components/QuestionList.js'; // Firebase\n\nimport { getApps, initializeApp } from 'firebase/app';\nimport { getFirestore, collection, query, orderBy, limit, startAfter, getDocs, updateDoc } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyArjDv3hS4_rw1YyNz-JFXDX1ufF72bqr8\",\n  authDomain: \"chooseone-105a9.firebaseapp.com\",\n  databaseURL: \"https://chooseone-default-rtdb.firebaseio.com\",\n  projectId: \"chooseone\",\n  storageBucket: \"chooseone.appspot.com\",\n  messagingSenderId: \"722704825746\",\n  appId: \"1:722704825746:web:73f11551b9e59f4bc2d54b\",\n  measurementId: \"G-YJ97DZH6V5\"\n};\nvar db = '';\n\nif (!getApps().length) {\n  const firebaseApp = initializeApp(firebaseConfig);\n  db = getFirestore(firebaseApp);\n} else {\n  db = getFirestore();\n}\n\nexport default function Home() {\n  _s();\n\n  const [questions, setQuestions] = useState([]);\n  const [hasMore, setHasMore] = useState(false); // APIに変更前は true\n\n  const [end, setEnd] = useState(null);\n  const [last, setLast] = useState(null); // const q = query(collection(db, 'questions'), orderBy('created_at', 'desc'), limit(10))\n\n  const users = query(collection(db, 'users'), orderBy('created_at', 'desc'), limit(1));\n  const promiseD = new Promise(function (resolve, reject) {\n    resolve(getDocs(users));\n  });\n  promiseD.then(users => {\n    var ques = [];\n    Promise.all(users.docs.map(async doc => {\n      ques.push(doc.data());\n      console.log(doc.created_at); // updateDoc(doc, {\n      //   uid: doc.id\n      // });\n    })).then(() => {\n      console.log(ques);\n    });\n  }, []);\n  useEffect(() => {\n    if (questions.length !== 0) return null;\n    axios.get('http://127.0.0.1:8000/api/questions').then(response => {\n      setQuestions(response.data);\n    }).catch(error => {\n      console.log(error);\n    }); // const q = query(collection(db, 'questions'), orderBy('created_at', 'desc'), limit(10))\n    // const promiseD = new Promise(function(resolve, reject) {\n    //   resolve(getDocs(q));\n    // });\n    // promiseD.then((qq) => {\n    //   var ques = [];\n    //   Promise.all(qq.docs.map(async doc => {\n    //     ques.push(doc.data());\n    //     if(ques.length === 10) setLast(doc);\n    //   })).then(() => {\n    //     setQuestions(ques);\n    //   })\n    // }, []);\n    // if(end === null){\n    //   setEnd(query(collection(db, 'questions'), orderBy('created_at', 'asc'), limit(1)));\n    // }\n  });\n\n  const loadMore = async page => {\n    var more = true;\n    setHasMore(false); // const next = await getDocs(query(collection(db, 'questions'), orderBy('created_at', 'desc'), startAfter(last), limit(10)));\n    // var ques = [];\n    // await Promise.all(next.docs.map(async doc => {\n    //   ques.push(doc.data());\n    //   if(doc === end || ques.length === 10) {\n    //     if(doc === end) more = false;\n    //     setLast(doc);\n    //   }\n    // })).then(() => setQuestions(questions.concat(ques)));\n    // if(more) setHasMore(true);\n    // else setHasMore(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      title: \"ChooseOne\",\n      meta: [{\n        name: 'description',\n        content: 'ChooseOne lets you have access to general understandings through user-interactive questions. The more you vote, the more you can influence the results, and it can be helpful to all the people who want to know the results.'\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      loadMore: loadMore,\n      hasMore: hasMore,\n      threshold: 500,\n      loader: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(QuestionList, {\n        questions: questions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"gg0WBU3vb3ItjxNLchLLB9xWy/A=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/Home.js"],"names":["React","useState","useEffect","Fragment","Helmet","InfiniteScroll","axios","QuestionList","getApps","initializeApp","getFirestore","collection","query","orderBy","limit","startAfter","getDocs","updateDoc","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","length","firebaseApp","Home","questions","setQuestions","hasMore","setHasMore","end","setEnd","last","setLast","users","promiseD","Promise","resolve","reject","then","ques","all","docs","map","doc","push","data","console","log","created_at","get","response","catch","error","loadMore","page","more","name","content"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport InfiniteScroll  from \"react-infinite-scroller\"\nimport axios from \"axios\";\n\nimport QuestionList from '../components/QuestionList.js';\n\n// Firebase\nimport { getApps, initializeApp } from 'firebase/app';\nimport { getFirestore, collection, query, orderBy, limit, startAfter, getDocs, updateDoc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyArjDv3hS4_rw1YyNz-JFXDX1ufF72bqr8\",\n  authDomain: \"chooseone-105a9.firebaseapp.com\",\n  databaseURL: \"https://chooseone-default-rtdb.firebaseio.com\",\n  projectId: \"chooseone\",\n  storageBucket: \"chooseone.appspot.com\",\n  messagingSenderId: \"722704825746\",\n  appId: \"1:722704825746:web:73f11551b9e59f4bc2d54b\",\n  measurementId: \"G-YJ97DZH6V5\"\n};\nvar db = '';\nif (!getApps().length){ \n  const firebaseApp = initializeApp(firebaseConfig);\n  db = getFirestore(firebaseApp);\n}else{\n  db = getFirestore();\n}\n\n\nexport default function Home () {\n\n  const [questions, setQuestions] = useState([]);\n  const [hasMore, setHasMore] = useState(false);                 // APIに変更前は true\n  const [end, setEnd] = useState(null);\n  const [last, setLast] = useState(null);\n\n  // const q = query(collection(db, 'questions'), orderBy('created_at', 'desc'), limit(10))\n  const users = query(collection(db, 'users'), orderBy('created_at', 'desc'), limit(1))\n  const promiseD = new Promise(function(resolve, reject) {\n    resolve(getDocs(users));\n  });\n  promiseD.then((users) => {\n    var ques = [];\n    Promise.all(users.docs.map(async doc => {\n      ques.push(doc.data());\n      console.log(doc.created_at);\n      // updateDoc(doc, {\n      //   uid: doc.id\n      // });\n    })).then(() => {\n      console.log(ques);\n    })\n  }, []);\n\n  useEffect(() => {\n    if(questions.length !== 0) return null;\n\n    axios.get('http://127.0.0.1:8000/api/questions')\n      .then(response => {\n        setQuestions(response.data)\n      })\n      .catch(error => {\n        console.log(error);\n      })\n\n    // const q = query(collection(db, 'questions'), orderBy('created_at', 'desc'), limit(10))\n    // const promiseD = new Promise(function(resolve, reject) {\n    //   resolve(getDocs(q));\n    // });\n    // promiseD.then((qq) => {\n    //   var ques = [];\n    //   Promise.all(qq.docs.map(async doc => {\n    //     ques.push(doc.data());\n    //     if(ques.length === 10) setLast(doc);\n    //   })).then(() => {\n    //     setQuestions(ques);\n    //   })\n    // }, []);\n\n    // if(end === null){\n    //   setEnd(query(collection(db, 'questions'), orderBy('created_at', 'asc'), limit(1)));\n    // }\n  });\n\n  const loadMore = async (page) => {\n    var more = true;\n    setHasMore(false);\n\n    // const next = await getDocs(query(collection(db, 'questions'), orderBy('created_at', 'desc'), startAfter(last), limit(10)));\n    // var ques = [];\n    // await Promise.all(next.docs.map(async doc => {\n    //   ques.push(doc.data());\n    //   if(doc === end || ques.length === 10) {\n    //     if(doc === end) more = false;\n    //     setLast(doc);\n    //   }\n    // })).then(() => setQuestions(questions.concat(ques)));\n\n    // if(more) setHasMore(true);\n    // else setHasMore(false);\n  }\n\n  return (\n    <Fragment>\n      <Helmet\n        title = 'ChooseOne'\n        meta={[\n          { name: 'description', content: 'ChooseOne lets you have access to general understandings through user-interactive questions. The more you vote, the more you can influence the results, and it can be helpful to all the people who want to know the results.' }\n        ]}\n      />\n      <InfiniteScroll\n        loadMore={loadMore}\n        hasMore={hasMore}\n        threshold={500}\n        loader={<div></div> }\n      >\n        <QuestionList questions={questions} />\n      </InfiniteScroll>\n    </Fragment>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}