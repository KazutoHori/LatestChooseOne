{"ast":null,"code":"var _jsxFileName = \"/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/QuestionVoted.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, Fragment } from 'react';\nimport QuestionList from '../components/QuestionList.js';\nimport { makeStyles, createStyles } from '@material-ui/core';\nimport { Helmet } from \"react-helmet\"; // Firebase\n\nimport { getApps, initializeApp } from 'firebase/app';\nimport { getFirestore, getDoc, doc } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyArjDv3hS4_rw1YyNz-JFXDX1ufF72bqr8\",\n  authDomain: \"chooseone-105a9.firebaseapp.com\",\n  databaseURL: \"https://chooseone-default-rtdb.firebaseio.com\",\n  projectId: \"chooseone\",\n  storageBucket: \"chooseone.appspot.com\",\n  messagingSenderId: \"722704825746\",\n  appId: \"1:722704825746:web:73f11551b9e59f4bc2d54b\",\n  measurementId: \"G-YJ97DZH6V5\"\n};\nvar db = '';\n\nif (!getApps().length) {\n  const firebaseApp = initializeApp(firebaseConfig);\n  db = getFirestore(firebaseApp);\n} else {\n  db = getFirestore();\n}\n\nexport default function QuestionVoted(props) {\n  _s();\n\n  // カスタムフック\n  // react router\n  // コンテキスト\n  const [questions, setQuestions] = useState(null);\n  const uid = localStorage.getItem('chooseoneUid');\n  const styles = useStyles();\n  useEffect(() => {\n    const u = doc(db, 'users', uid);\n    const promise = new Promise(function (resolve) {\n      resolve(getDoc(u));\n    });\n    promise.then(user => {\n      if (user.exists()) {\n        var qs = user.data().question_voted || [];\n        const promises = qs.map(q => {\n          return getDoc(doc(db, 'questions', q.question));\n        });\n        Promise.all(promises).then(docs => {\n          const data = docs.reverse().filter(doc => doc.exists()).map(doc => doc.data());\n          setQuestions(data);\n        });\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      title: \"Questions You Voted\",\n      meta: [{\n        name: 'description',\n        content: 'ChooseOne lets you have access to general understandings through user-interactive questions. The more you vote, the more you can influence the results, and it can be helpful to all the people who want to know the results.'\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.title,\n      children: \"Questions You Voted\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), questions !== null && questions.length === 0 ? /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: \"   There are no questions you like.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(QuestionList, {\n      questions: questions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(QuestionVoted, \"1nujW7V3Zr5V7K4ghKiMIXaJp8o=\", false, function () {\n  return [useStyles];\n});\n\n_c = QuestionVoted;\nconst useStyles = makeStyles(() => createStyles({\n  title: {\n    fontFamily: 'lust-script, sans-serif',\n    fontStyle: 'normal',\n    fontWeight: 700,\n    fontSize: 24\n  },\n  '@media (max-width: 500px)': {\n    title: {\n      fontSize: 22,\n      marginLeft: 13,\n      marginTop: 7\n    }\n  }\n}));\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionVoted\");","map":{"version":3,"sources":["/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/QuestionVoted.js"],"names":["React","useEffect","useState","Fragment","QuestionList","makeStyles","createStyles","Helmet","getApps","initializeApp","getFirestore","getDoc","doc","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","length","firebaseApp","QuestionVoted","props","questions","setQuestions","uid","localStorage","getItem","styles","useStyles","u","promise","Promise","resolve","then","user","exists","qs","data","question_voted","promises","map","q","question","all","docs","reverse","filter","name","content","title","fontFamily","fontStyle","fontWeight","fontSize","marginLeft","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Fragment } from 'react';\nimport QuestionList from '../components/QuestionList.js';\nimport { makeStyles, createStyles } from '@material-ui/core';\nimport { Helmet } from \"react-helmet\";\n\n// Firebase\nimport { getApps, initializeApp } from 'firebase/app';\nimport { getFirestore, getDoc, doc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyArjDv3hS4_rw1YyNz-JFXDX1ufF72bqr8\",\n  authDomain: \"chooseone-105a9.firebaseapp.com\",\n  databaseURL: \"https://chooseone-default-rtdb.firebaseio.com\",\n  projectId: \"chooseone\",\n  storageBucket: \"chooseone.appspot.com\",\n  messagingSenderId: \"722704825746\",\n  appId: \"1:722704825746:web:73f11551b9e59f4bc2d54b\",\n  measurementId: \"G-YJ97DZH6V5\"\n};\nvar db = '';\nif (!getApps().length){ \n  const firebaseApp = initializeApp(firebaseConfig);\n  db = getFirestore(firebaseApp);\n}else{\n  db = getFirestore();\n}\n\nexport default function QuestionVoted (props) {\n\n  // カスタムフック\n  // react router\n  // コンテキスト\n  \n  const [questions, setQuestions] = useState(null);\n  const uid = localStorage.getItem('chooseoneUid');\n  const styles = useStyles();\n\n  useEffect(() => {\n    const u = doc(db, 'users', uid);\n    const promise = new Promise((function(resolve) {\n      resolve(getDoc(u));\n    }));\n    promise.then((user) => {\n      if(user.exists()){\n        var qs = user.data().question_voted || [];\n        const promises = qs.map((q) => {\n          return getDoc(doc(db, 'questions', q.question));\n        })\n        Promise.all(promises).then((docs) => {\n          const data = docs.reverse().filter((doc) => doc.exists()).map((doc) => doc.data())\n          setQuestions(data);\n        })\n      }\n    })\n  }, []);\n\n  return (\n    <Fragment>\n      <Helmet\n        title = 'Questions You Voted'\n        meta={[\n          { name: 'description', content: 'ChooseOne lets you have access to general understandings through user-interactive questions. The more you vote, the more you can influence the results, and it can be helpful to all the people who want to know the results.' }\n        ]}\n      />\n      <p className={styles.title}>Questions You Voted</p>\n      {questions !== null && questions.length === 0\n        ?\n        <pre>   There are no questions you like.</pre>\n        :\n        <QuestionList questions={questions} />\n      }\n    </Fragment>\n  )\n}\n\nconst useStyles = makeStyles(() => createStyles({\n  title: {\n    fontFamily: 'lust-script, sans-serif',\n    fontStyle: 'normal',\n    fontWeight: 700,\n    fontSize: 24,\n  },\n  '@media (max-width: 500px)': {\n    title: {\n      fontSize: 22,\n      marginLeft: 13,\n      marginTop: 7,\n    },\n  }\n}));"]},"metadata":{},"sourceType":"module"}