{"ast":null,"code":"import _slicedToArray from\"/Users/horikazuto/ChooseOne/LatestChooseOne/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState,Fragment}from'react';import QuestionList from'../components/QuestionList.js';import{makeStyles,createStyles}from'@material-ui/core';import{Helmet}from\"react-helmet\";// Firebase\nimport{getApps,initializeApp}from'firebase/app';import{getFirestore,getDoc,doc}from\"firebase/firestore\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var firebaseConfig={apiKey:\"AIzaSyArjDv3hS4_rw1YyNz-JFXDX1ufF72bqr8\",authDomain:\"chooseone-105a9.firebaseapp.com\",databaseURL:\"https://chooseone-default-rtdb.firebaseio.com\",projectId:\"chooseone\",storageBucket:\"chooseone.appspot.com\",messagingSenderId:\"722704825746\",appId:\"1:722704825746:web:73f11551b9e59f4bc2d54b\",measurementId:\"G-YJ97DZH6V5\"};var db='';if(!getApps().length){var firebaseApp=initializeApp(firebaseConfig);db=getFirestore(firebaseApp);}else{db=getFirestore();}export default function QuestionLiked(props){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),questions=_useState2[0],setQuestions=_useState2[1];var uid=localStorage.getItem('chooseoneUid');var styles=useStyles();useEffect(function(){var u=doc(db,'users',uid);var promise=new Promise(function(resolve){resolve(getDoc(u));});promise.then(function(user){if(user.exists()){var qs=user.data().question_liked||[];var promises=qs.map(function(q){return getDoc(doc(db,'questions',q));});Promise.all(promises).then(function(docs){var data=docs.reverse().filter(function(doc){return doc.exists();}).map(function(doc){return doc.data();});setQuestions(data);});}});},[]);return/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(Helmet,{title:\"Questions You Like\",meta:[{name:'description',content:'ChooseOne lets you have access to general understandings through user-interactive questions. The more you vote, the more you can influence the results, and it can be helpful to all the people who want to know the results.'}]}),/*#__PURE__*/_jsx(\"p\",{className:styles.title,children:\"Questions You Like\"}),questions!==null&&questions.length===0?/*#__PURE__*/_jsx(\"pre\",{children:\"   There are no questions you like.\"}):/*#__PURE__*/_jsx(QuestionList,{questions:questions})]});}var useStyles=makeStyles(function(){return createStyles({title:{fontFamily:'lust-script, sans-serif',fontStyle:'normal',fontWeight:700,fontSize:24},'@media (max-width: 500px)':{title:{fontSize:22,marginLeft:13,marginTop:7}}});});","map":{"version":3,"sources":["/Users/horikazuto/ChooseOne/LatestChooseOne/src/screens/QuestionLiked.js"],"names":["React","useEffect","useState","Fragment","QuestionList","makeStyles","createStyles","Helmet","getApps","initializeApp","getFirestore","getDoc","doc","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","length","firebaseApp","QuestionLiked","props","questions","setQuestions","uid","localStorage","getItem","styles","useStyles","u","promise","Promise","resolve","then","user","exists","qs","data","question_liked","promises","map","q","all","docs","reverse","filter","name","content","title","fontFamily","fontStyle","fontWeight","fontSize","marginLeft","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Fragment } from 'react';\nimport QuestionList from '../components/QuestionList.js';\nimport { makeStyles, createStyles } from '@material-ui/core';\nimport { Helmet } from \"react-helmet\";\n\n// Firebase\nimport { getApps, initializeApp } from 'firebase/app';\nimport { getFirestore, getDoc, doc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyArjDv3hS4_rw1YyNz-JFXDX1ufF72bqr8\",\n  authDomain: \"chooseone-105a9.firebaseapp.com\",\n  databaseURL: \"https://chooseone-default-rtdb.firebaseio.com\",\n  projectId: \"chooseone\",\n  storageBucket: \"chooseone.appspot.com\",\n  messagingSenderId: \"722704825746\",\n  appId: \"1:722704825746:web:73f11551b9e59f4bc2d54b\",\n  measurementId: \"G-YJ97DZH6V5\"\n};\nvar db = '';\nif (!getApps().length){ \n  const firebaseApp = initializeApp(firebaseConfig);\n  db = getFirestore(firebaseApp);\n}else{\n  db = getFirestore();\n}\n\n\nexport default function QuestionLiked (props) {\n\n  const [questions, setQuestions] = useState(null);\n  const uid = localStorage.getItem('chooseoneUid');\n  const styles = useStyles();\n\n  useEffect(() => {\n    const u = doc(db, 'users', uid);\n    const promise = new Promise((function(resolve) {\n      resolve(getDoc(u));\n    }));\n    promise.then((user) => {\n      if(user.exists()){\n        var qs = user.data().question_liked || [];\n        const promises = qs.map((q) => {\n          return getDoc(doc(db, 'questions', q));\n        })\n        Promise.all(promises).then((docs) => {\n          const data = docs.reverse().filter((doc) => doc.exists()).map((doc) => doc.data())\n          setQuestions(data);\n        })\n      }\n    })\n  }, []);\n\n  return (\n    <Fragment>\n      <Helmet\n        title = 'Questions You Like'\n        meta={[\n          { name: 'description', content: 'ChooseOne lets you have access to general understandings through user-interactive questions. The more you vote, the more you can influence the results, and it can be helpful to all the people who want to know the results.' }\n        ]}\n      />\n      <p className={styles.title}>Questions You Like</p>\n      {questions !== null && questions.length === 0\n        ?\n        <pre>   There are no questions you like.</pre>\n        :\n        <QuestionList questions={questions} />\n      }\n    </Fragment>\n  )\n}\n\nconst useStyles = makeStyles(() => createStyles({\n  title: {\n    fontFamily: 'lust-script, sans-serif',\n    fontStyle: 'normal',\n    fontWeight: 700,\n    fontSize: 24,\n  },\n  '@media (max-width: 500px)': {\n    title: {\n      fontSize: 22,\n      marginLeft: 13,\n      marginTop: 7,\n    },\n  }\n}));\n"]},"metadata":{},"sourceType":"module"}